
RobotMotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004858  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004998  08004998  00005998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c4  080049c4  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080049c4  080049c4  000059c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049cc  080049cc  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049cc  080049cc  000059cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049d0  080049d0  000059d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080049d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025f0  20000010  080049e4  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002600  080049e4  00006600  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118d5  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003012  00000000  00000000  0001790e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001a920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7f  00000000  00000000  0001b970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179a3  00000000  00000000  0001c5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012118  00000000  00000000  00033f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095089  00000000  00000000  000460aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db133  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004384  00000000  00000000  000db178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000df4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	08004980 	.word	0x08004980

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	08004980 	.word	0x08004980

08000180 <__aeabi_fmul>:
 8000180:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000184:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000188:	bf1e      	ittt	ne
 800018a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800018e:	ea92 0f0c 	teqne	r2, ip
 8000192:	ea93 0f0c 	teqne	r3, ip
 8000196:	d06f      	beq.n	8000278 <__aeabi_fmul+0xf8>
 8000198:	441a      	add	r2, r3
 800019a:	ea80 0c01 	eor.w	ip, r0, r1
 800019e:	0240      	lsls	r0, r0, #9
 80001a0:	bf18      	it	ne
 80001a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001a6:	d01e      	beq.n	80001e6 <__aeabi_fmul+0x66>
 80001a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80001ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001b4:	fba0 3101 	umull	r3, r1, r0, r1
 80001b8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001bc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001c0:	bf3e      	ittt	cc
 80001c2:	0049      	lslcc	r1, r1, #1
 80001c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001c8:	005b      	lslcc	r3, r3, #1
 80001ca:	ea40 0001 	orr.w	r0, r0, r1
 80001ce:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001d2:	2afd      	cmp	r2, #253	@ 0xfd
 80001d4:	d81d      	bhi.n	8000212 <__aeabi_fmul+0x92>
 80001d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001de:	bf08      	it	eq
 80001e0:	f020 0001 	biceq.w	r0, r0, #1
 80001e4:	4770      	bx	lr
 80001e6:	f090 0f00 	teq	r0, #0
 80001ea:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ee:	bf08      	it	eq
 80001f0:	0249      	lsleq	r1, r1, #9
 80001f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001fa:	3a7f      	subs	r2, #127	@ 0x7f
 80001fc:	bfc2      	ittt	gt
 80001fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000202:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000206:	4770      	bxgt	lr
 8000208:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800020c:	f04f 0300 	mov.w	r3, #0
 8000210:	3a01      	subs	r2, #1
 8000212:	dc5d      	bgt.n	80002d0 <__aeabi_fmul+0x150>
 8000214:	f112 0f19 	cmn.w	r2, #25
 8000218:	bfdc      	itt	le
 800021a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800021e:	4770      	bxle	lr
 8000220:	f1c2 0200 	rsb	r2, r2, #0
 8000224:	0041      	lsls	r1, r0, #1
 8000226:	fa21 f102 	lsr.w	r1, r1, r2
 800022a:	f1c2 0220 	rsb	r2, r2, #32
 800022e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000232:	ea5f 0031 	movs.w	r0, r1, rrx
 8000236:	f140 0000 	adc.w	r0, r0, #0
 800023a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800023e:	bf08      	it	eq
 8000240:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000244:	4770      	bx	lr
 8000246:	f092 0f00 	teq	r2, #0
 800024a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800024e:	bf02      	ittt	eq
 8000250:	0040      	lsleq	r0, r0, #1
 8000252:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000256:	3a01      	subeq	r2, #1
 8000258:	d0f9      	beq.n	800024e <__aeabi_fmul+0xce>
 800025a:	ea40 000c 	orr.w	r0, r0, ip
 800025e:	f093 0f00 	teq	r3, #0
 8000262:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000266:	bf02      	ittt	eq
 8000268:	0049      	lsleq	r1, r1, #1
 800026a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800026e:	3b01      	subeq	r3, #1
 8000270:	d0f9      	beq.n	8000266 <__aeabi_fmul+0xe6>
 8000272:	ea41 010c 	orr.w	r1, r1, ip
 8000276:	e78f      	b.n	8000198 <__aeabi_fmul+0x18>
 8000278:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800027c:	ea92 0f0c 	teq	r2, ip
 8000280:	bf18      	it	ne
 8000282:	ea93 0f0c 	teqne	r3, ip
 8000286:	d00a      	beq.n	800029e <__aeabi_fmul+0x11e>
 8000288:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800028c:	bf18      	it	ne
 800028e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000292:	d1d8      	bne.n	8000246 <__aeabi_fmul+0xc6>
 8000294:	ea80 0001 	eor.w	r0, r0, r1
 8000298:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	bf17      	itett	ne
 80002a4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80002a8:	4608      	moveq	r0, r1
 80002aa:	f091 0f00 	teqne	r1, #0
 80002ae:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002b2:	d014      	beq.n	80002de <__aeabi_fmul+0x15e>
 80002b4:	ea92 0f0c 	teq	r2, ip
 80002b8:	d101      	bne.n	80002be <__aeabi_fmul+0x13e>
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	d10f      	bne.n	80002de <__aeabi_fmul+0x15e>
 80002be:	ea93 0f0c 	teq	r3, ip
 80002c2:	d103      	bne.n	80002cc <__aeabi_fmul+0x14c>
 80002c4:	024b      	lsls	r3, r1, #9
 80002c6:	bf18      	it	ne
 80002c8:	4608      	movne	r0, r1
 80002ca:	d108      	bne.n	80002de <__aeabi_fmul+0x15e>
 80002cc:	ea80 0001 	eor.w	r0, r0, r1
 80002d0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002d4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002dc:	4770      	bx	lr
 80002de:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002e2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_frsub>:
 80002e8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002ec:	e002      	b.n	80002f4 <__addsf3>
 80002ee:	bf00      	nop

080002f0 <__aeabi_fsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002f4 <__addsf3>:
 80002f4:	0042      	lsls	r2, r0, #1
 80002f6:	bf1f      	itttt	ne
 80002f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002fc:	ea92 0f03 	teqne	r2, r3
 8000300:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000304:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000308:	d06a      	beq.n	80003e0 <__addsf3+0xec>
 800030a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800030e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000312:	bfc1      	itttt	gt
 8000314:	18d2      	addgt	r2, r2, r3
 8000316:	4041      	eorgt	r1, r0
 8000318:	4048      	eorgt	r0, r1
 800031a:	4041      	eorgt	r1, r0
 800031c:	bfb8      	it	lt
 800031e:	425b      	neglt	r3, r3
 8000320:	2b19      	cmp	r3, #25
 8000322:	bf88      	it	hi
 8000324:	4770      	bxhi	lr
 8000326:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800032a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800032e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000332:	bf18      	it	ne
 8000334:	4240      	negne	r0, r0
 8000336:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800033a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800033e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000342:	bf18      	it	ne
 8000344:	4249      	negne	r1, r1
 8000346:	ea92 0f03 	teq	r2, r3
 800034a:	d03f      	beq.n	80003cc <__addsf3+0xd8>
 800034c:	f1a2 0201 	sub.w	r2, r2, #1
 8000350:	fa41 fc03 	asr.w	ip, r1, r3
 8000354:	eb10 000c 	adds.w	r0, r0, ip
 8000358:	f1c3 0320 	rsb	r3, r3, #32
 800035c:	fa01 f103 	lsl.w	r1, r1, r3
 8000360:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000364:	d502      	bpl.n	800036c <__addsf3+0x78>
 8000366:	4249      	negs	r1, r1
 8000368:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800036c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000370:	d313      	bcc.n	800039a <__addsf3+0xa6>
 8000372:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000376:	d306      	bcc.n	8000386 <__addsf3+0x92>
 8000378:	0840      	lsrs	r0, r0, #1
 800037a:	ea4f 0131 	mov.w	r1, r1, rrx
 800037e:	f102 0201 	add.w	r2, r2, #1
 8000382:	2afe      	cmp	r2, #254	@ 0xfe
 8000384:	d251      	bcs.n	800042a <__addsf3+0x136>
 8000386:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800038a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800038e:	bf08      	it	eq
 8000390:	f020 0001 	biceq.w	r0, r0, #1
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	4770      	bx	lr
 800039a:	0049      	lsls	r1, r1, #1
 800039c:	eb40 0000 	adc.w	r0, r0, r0
 80003a0:	3a01      	subs	r2, #1
 80003a2:	bf28      	it	cs
 80003a4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80003a8:	d2ed      	bcs.n	8000386 <__addsf3+0x92>
 80003aa:	fab0 fc80 	clz	ip, r0
 80003ae:	f1ac 0c08 	sub.w	ip, ip, #8
 80003b2:	ebb2 020c 	subs.w	r2, r2, ip
 80003b6:	fa00 f00c 	lsl.w	r0, r0, ip
 80003ba:	bfaa      	itet	ge
 80003bc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003c0:	4252      	neglt	r2, r2
 80003c2:	4318      	orrge	r0, r3
 80003c4:	bfbc      	itt	lt
 80003c6:	40d0      	lsrlt	r0, r2
 80003c8:	4318      	orrlt	r0, r3
 80003ca:	4770      	bx	lr
 80003cc:	f092 0f00 	teq	r2, #0
 80003d0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003d4:	bf06      	itte	eq
 80003d6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003da:	3201      	addeq	r2, #1
 80003dc:	3b01      	subne	r3, #1
 80003de:	e7b5      	b.n	800034c <__addsf3+0x58>
 80003e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003e8:	bf18      	it	ne
 80003ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ee:	d021      	beq.n	8000434 <__addsf3+0x140>
 80003f0:	ea92 0f03 	teq	r2, r3
 80003f4:	d004      	beq.n	8000400 <__addsf3+0x10c>
 80003f6:	f092 0f00 	teq	r2, #0
 80003fa:	bf08      	it	eq
 80003fc:	4608      	moveq	r0, r1
 80003fe:	4770      	bx	lr
 8000400:	ea90 0f01 	teq	r0, r1
 8000404:	bf1c      	itt	ne
 8000406:	2000      	movne	r0, #0
 8000408:	4770      	bxne	lr
 800040a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800040e:	d104      	bne.n	800041a <__addsf3+0x126>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	bf28      	it	cs
 8000414:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000418:	4770      	bx	lr
 800041a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800041e:	bf3c      	itt	cc
 8000420:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000424:	4770      	bxcc	lr
 8000426:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800042a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800042e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000432:	4770      	bx	lr
 8000434:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000438:	bf16      	itet	ne
 800043a:	4608      	movne	r0, r1
 800043c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000440:	4601      	movne	r1, r0
 8000442:	0242      	lsls	r2, r0, #9
 8000444:	bf06      	itte	eq
 8000446:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800044a:	ea90 0f01 	teqeq	r0, r1
 800044e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000452:	4770      	bx	lr

08000454 <__aeabi_ui2f>:
 8000454:	f04f 0300 	mov.w	r3, #0
 8000458:	e004      	b.n	8000464 <__aeabi_i2f+0x8>
 800045a:	bf00      	nop

0800045c <__aeabi_i2f>:
 800045c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	ea5f 0c00 	movs.w	ip, r0
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000470:	4601      	mov	r1, r0
 8000472:	f04f 0000 	mov.w	r0, #0
 8000476:	e01c      	b.n	80004b2 <__aeabi_l2f+0x2a>

08000478 <__aeabi_ul2f>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	f04f 0300 	mov.w	r3, #0
 8000484:	e00a      	b.n	800049c <__aeabi_l2f+0x14>
 8000486:	bf00      	nop

08000488 <__aeabi_l2f>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000494:	d502      	bpl.n	800049c <__aeabi_l2f+0x14>
 8000496:	4240      	negs	r0, r0
 8000498:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800049c:	ea5f 0c01 	movs.w	ip, r1
 80004a0:	bf02      	ittt	eq
 80004a2:	4684      	moveq	ip, r0
 80004a4:	4601      	moveq	r1, r0
 80004a6:	2000      	moveq	r0, #0
 80004a8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80004ac:	bf08      	it	eq
 80004ae:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80004b2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80004b6:	fabc f28c 	clz	r2, ip
 80004ba:	3a08      	subs	r2, #8
 80004bc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004c0:	db10      	blt.n	80004e4 <__aeabi_l2f+0x5c>
 80004c2:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c6:	4463      	add	r3, ip
 80004c8:	fa00 fc02 	lsl.w	ip, r0, r2
 80004cc:	f1c2 0220 	rsb	r2, r2, #32
 80004d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004d4:	fa20 f202 	lsr.w	r2, r0, r2
 80004d8:	eb43 0002 	adc.w	r0, r3, r2
 80004dc:	bf08      	it	eq
 80004de:	f020 0001 	biceq.w	r0, r0, #1
 80004e2:	4770      	bx	lr
 80004e4:	f102 0220 	add.w	r2, r2, #32
 80004e8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004ec:	f1c2 0220 	rsb	r2, r2, #32
 80004f0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004f4:	fa21 f202 	lsr.w	r2, r1, r2
 80004f8:	eb43 0002 	adc.w	r0, r3, r2
 80004fc:	bf08      	it	eq
 80004fe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000502:	4770      	bx	lr

08000504 <__aeabi_f2uiz>:
 8000504:	0042      	lsls	r2, r0, #1
 8000506:	d20e      	bcs.n	8000526 <__aeabi_f2uiz+0x22>
 8000508:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800050c:	d30b      	bcc.n	8000526 <__aeabi_f2uiz+0x22>
 800050e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000512:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000516:	d409      	bmi.n	800052c <__aeabi_f2uiz+0x28>
 8000518:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800051c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000520:	fa23 f002 	lsr.w	r0, r3, r2
 8000524:	4770      	bx	lr
 8000526:	f04f 0000 	mov.w	r0, #0
 800052a:	4770      	bx	lr
 800052c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000530:	d101      	bne.n	8000536 <__aeabi_f2uiz+0x32>
 8000532:	0242      	lsls	r2, r0, #9
 8000534:	d102      	bne.n	800053c <__aeabi_f2uiz+0x38>
 8000536:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800053a:	4770      	bx	lr
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <__aeabi_uldivmod>:
 8000544:	b953      	cbnz	r3, 800055c <__aeabi_uldivmod+0x18>
 8000546:	b94a      	cbnz	r2, 800055c <__aeabi_uldivmod+0x18>
 8000548:	2900      	cmp	r1, #0
 800054a:	bf08      	it	eq
 800054c:	2800      	cmpeq	r0, #0
 800054e:	bf1c      	itt	ne
 8000550:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000554:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000558:	f000 b98c 	b.w	8000874 <__aeabi_idiv0>
 800055c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000560:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000564:	f000 f806 	bl	8000574 <__udivmoddi4>
 8000568:	f8dd e004 	ldr.w	lr, [sp, #4]
 800056c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000570:	b004      	add	sp, #16
 8000572:	4770      	bx	lr

08000574 <__udivmoddi4>:
 8000574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000578:	9d08      	ldr	r5, [sp, #32]
 800057a:	468e      	mov	lr, r1
 800057c:	4604      	mov	r4, r0
 800057e:	4688      	mov	r8, r1
 8000580:	2b00      	cmp	r3, #0
 8000582:	d14a      	bne.n	800061a <__udivmoddi4+0xa6>
 8000584:	428a      	cmp	r2, r1
 8000586:	4617      	mov	r7, r2
 8000588:	d962      	bls.n	8000650 <__udivmoddi4+0xdc>
 800058a:	fab2 f682 	clz	r6, r2
 800058e:	b14e      	cbz	r6, 80005a4 <__udivmoddi4+0x30>
 8000590:	f1c6 0320 	rsb	r3, r6, #32
 8000594:	fa01 f806 	lsl.w	r8, r1, r6
 8000598:	fa20 f303 	lsr.w	r3, r0, r3
 800059c:	40b7      	lsls	r7, r6
 800059e:	ea43 0808 	orr.w	r8, r3, r8
 80005a2:	40b4      	lsls	r4, r6
 80005a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80005ac:	fa1f fc87 	uxth.w	ip, r7
 80005b0:	fb0e 8811 	mls	r8, lr, r1, r8
 80005b4:	fb01 f20c 	mul.w	r2, r1, ip
 80005b8:	0c23      	lsrs	r3, r4, #16
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	429a      	cmp	r2, r3
 80005c0:	d909      	bls.n	80005d6 <__udivmoddi4+0x62>
 80005c2:	18fb      	adds	r3, r7, r3
 80005c4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80005c8:	f080 80eb 	bcs.w	80007a2 <__udivmoddi4+0x22e>
 80005cc:	429a      	cmp	r2, r3
 80005ce:	f240 80e8 	bls.w	80007a2 <__udivmoddi4+0x22e>
 80005d2:	3902      	subs	r1, #2
 80005d4:	443b      	add	r3, r7
 80005d6:	1a9a      	subs	r2, r3, r2
 80005d8:	fbb2 f0fe 	udiv	r0, r2, lr
 80005dc:	fb0e 2210 	mls	r2, lr, r0, r2
 80005e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80005e4:	b2a3      	uxth	r3, r4
 80005e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80005ea:	459c      	cmp	ip, r3
 80005ec:	d909      	bls.n	8000602 <__udivmoddi4+0x8e>
 80005ee:	18fb      	adds	r3, r7, r3
 80005f0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80005f4:	f080 80d7 	bcs.w	80007a6 <__udivmoddi4+0x232>
 80005f8:	459c      	cmp	ip, r3
 80005fa:	f240 80d4 	bls.w	80007a6 <__udivmoddi4+0x232>
 80005fe:	443b      	add	r3, r7
 8000600:	3802      	subs	r0, #2
 8000602:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000606:	2100      	movs	r1, #0
 8000608:	eba3 030c 	sub.w	r3, r3, ip
 800060c:	b11d      	cbz	r5, 8000616 <__udivmoddi4+0xa2>
 800060e:	2200      	movs	r2, #0
 8000610:	40f3      	lsrs	r3, r6
 8000612:	e9c5 3200 	strd	r3, r2, [r5]
 8000616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800061a:	428b      	cmp	r3, r1
 800061c:	d905      	bls.n	800062a <__udivmoddi4+0xb6>
 800061e:	b10d      	cbz	r5, 8000624 <__udivmoddi4+0xb0>
 8000620:	e9c5 0100 	strd	r0, r1, [r5]
 8000624:	2100      	movs	r1, #0
 8000626:	4608      	mov	r0, r1
 8000628:	e7f5      	b.n	8000616 <__udivmoddi4+0xa2>
 800062a:	fab3 f183 	clz	r1, r3
 800062e:	2900      	cmp	r1, #0
 8000630:	d146      	bne.n	80006c0 <__udivmoddi4+0x14c>
 8000632:	4573      	cmp	r3, lr
 8000634:	d302      	bcc.n	800063c <__udivmoddi4+0xc8>
 8000636:	4282      	cmp	r2, r0
 8000638:	f200 8108 	bhi.w	800084c <__udivmoddi4+0x2d8>
 800063c:	1a84      	subs	r4, r0, r2
 800063e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000642:	2001      	movs	r0, #1
 8000644:	4690      	mov	r8, r2
 8000646:	2d00      	cmp	r5, #0
 8000648:	d0e5      	beq.n	8000616 <__udivmoddi4+0xa2>
 800064a:	e9c5 4800 	strd	r4, r8, [r5]
 800064e:	e7e2      	b.n	8000616 <__udivmoddi4+0xa2>
 8000650:	2a00      	cmp	r2, #0
 8000652:	f000 8091 	beq.w	8000778 <__udivmoddi4+0x204>
 8000656:	fab2 f682 	clz	r6, r2
 800065a:	2e00      	cmp	r6, #0
 800065c:	f040 80a5 	bne.w	80007aa <__udivmoddi4+0x236>
 8000660:	1a8a      	subs	r2, r1, r2
 8000662:	2101      	movs	r1, #1
 8000664:	0c03      	lsrs	r3, r0, #16
 8000666:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800066a:	b280      	uxth	r0, r0
 800066c:	b2bc      	uxth	r4, r7
 800066e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000672:	fb0e 221c 	mls	r2, lr, ip, r2
 8000676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800067a:	fb04 f20c 	mul.w	r2, r4, ip
 800067e:	429a      	cmp	r2, r3
 8000680:	d907      	bls.n	8000692 <__udivmoddi4+0x11e>
 8000682:	18fb      	adds	r3, r7, r3
 8000684:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000688:	d202      	bcs.n	8000690 <__udivmoddi4+0x11c>
 800068a:	429a      	cmp	r2, r3
 800068c:	f200 80e3 	bhi.w	8000856 <__udivmoddi4+0x2e2>
 8000690:	46c4      	mov	ip, r8
 8000692:	1a9b      	subs	r3, r3, r2
 8000694:	fbb3 f2fe 	udiv	r2, r3, lr
 8000698:	fb0e 3312 	mls	r3, lr, r2, r3
 800069c:	fb02 f404 	mul.w	r4, r2, r4
 80006a0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80006a4:	429c      	cmp	r4, r3
 80006a6:	d907      	bls.n	80006b8 <__udivmoddi4+0x144>
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80006ae:	d202      	bcs.n	80006b6 <__udivmoddi4+0x142>
 80006b0:	429c      	cmp	r4, r3
 80006b2:	f200 80cd 	bhi.w	8000850 <__udivmoddi4+0x2dc>
 80006b6:	4602      	mov	r2, r0
 80006b8:	1b1b      	subs	r3, r3, r4
 80006ba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80006be:	e7a5      	b.n	800060c <__udivmoddi4+0x98>
 80006c0:	f1c1 0620 	rsb	r6, r1, #32
 80006c4:	408b      	lsls	r3, r1
 80006c6:	fa22 f706 	lsr.w	r7, r2, r6
 80006ca:	431f      	orrs	r7, r3
 80006cc:	fa2e fa06 	lsr.w	sl, lr, r6
 80006d0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80006d4:	fbba f8f9 	udiv	r8, sl, r9
 80006d8:	fa0e fe01 	lsl.w	lr, lr, r1
 80006dc:	fa20 f306 	lsr.w	r3, r0, r6
 80006e0:	fb09 aa18 	mls	sl, r9, r8, sl
 80006e4:	fa1f fc87 	uxth.w	ip, r7
 80006e8:	ea43 030e 	orr.w	r3, r3, lr
 80006ec:	fa00 fe01 	lsl.w	lr, r0, r1
 80006f0:	fb08 f00c 	mul.w	r0, r8, ip
 80006f4:	0c1c      	lsrs	r4, r3, #16
 80006f6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80006fa:	42a0      	cmp	r0, r4
 80006fc:	fa02 f201 	lsl.w	r2, r2, r1
 8000700:	d90a      	bls.n	8000718 <__udivmoddi4+0x1a4>
 8000702:	193c      	adds	r4, r7, r4
 8000704:	f108 3aff 	add.w	sl, r8, #4294967295	@ 0xffffffff
 8000708:	f080 809e 	bcs.w	8000848 <__udivmoddi4+0x2d4>
 800070c:	42a0      	cmp	r0, r4
 800070e:	f240 809b 	bls.w	8000848 <__udivmoddi4+0x2d4>
 8000712:	f1a8 0802 	sub.w	r8, r8, #2
 8000716:	443c      	add	r4, r7
 8000718:	1a24      	subs	r4, r4, r0
 800071a:	b298      	uxth	r0, r3
 800071c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000720:	fb09 4413 	mls	r4, r9, r3, r4
 8000724:	fb03 fc0c 	mul.w	ip, r3, ip
 8000728:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800072c:	45a4      	cmp	ip, r4
 800072e:	d909      	bls.n	8000744 <__udivmoddi4+0x1d0>
 8000730:	193c      	adds	r4, r7, r4
 8000732:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000736:	f080 8085 	bcs.w	8000844 <__udivmoddi4+0x2d0>
 800073a:	45a4      	cmp	ip, r4
 800073c:	f240 8082 	bls.w	8000844 <__udivmoddi4+0x2d0>
 8000740:	3b02      	subs	r3, #2
 8000742:	443c      	add	r4, r7
 8000744:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000748:	eba4 040c 	sub.w	r4, r4, ip
 800074c:	fba0 8c02 	umull	r8, ip, r0, r2
 8000750:	4564      	cmp	r4, ip
 8000752:	4643      	mov	r3, r8
 8000754:	46e1      	mov	r9, ip
 8000756:	d364      	bcc.n	8000822 <__udivmoddi4+0x2ae>
 8000758:	d061      	beq.n	800081e <__udivmoddi4+0x2aa>
 800075a:	b15d      	cbz	r5, 8000774 <__udivmoddi4+0x200>
 800075c:	ebbe 0203 	subs.w	r2, lr, r3
 8000760:	eb64 0409 	sbc.w	r4, r4, r9
 8000764:	fa04 f606 	lsl.w	r6, r4, r6
 8000768:	fa22 f301 	lsr.w	r3, r2, r1
 800076c:	431e      	orrs	r6, r3
 800076e:	40cc      	lsrs	r4, r1
 8000770:	e9c5 6400 	strd	r6, r4, [r5]
 8000774:	2100      	movs	r1, #0
 8000776:	e74e      	b.n	8000616 <__udivmoddi4+0xa2>
 8000778:	fbb1 fcf2 	udiv	ip, r1, r2
 800077c:	0c01      	lsrs	r1, r0, #16
 800077e:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000782:	b280      	uxth	r0, r0
 8000784:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000788:	463b      	mov	r3, r7
 800078a:	fbb1 f1f7 	udiv	r1, r1, r7
 800078e:	4638      	mov	r0, r7
 8000790:	463c      	mov	r4, r7
 8000792:	46b8      	mov	r8, r7
 8000794:	46be      	mov	lr, r7
 8000796:	2620      	movs	r6, #32
 8000798:	eba2 0208 	sub.w	r2, r2, r8
 800079c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80007a0:	e765      	b.n	800066e <__udivmoddi4+0xfa>
 80007a2:	4601      	mov	r1, r0
 80007a4:	e717      	b.n	80005d6 <__udivmoddi4+0x62>
 80007a6:	4610      	mov	r0, r2
 80007a8:	e72b      	b.n	8000602 <__udivmoddi4+0x8e>
 80007aa:	f1c6 0120 	rsb	r1, r6, #32
 80007ae:	fa2e fc01 	lsr.w	ip, lr, r1
 80007b2:	40b7      	lsls	r7, r6
 80007b4:	fa0e fe06 	lsl.w	lr, lr, r6
 80007b8:	fa20 f101 	lsr.w	r1, r0, r1
 80007bc:	ea41 010e 	orr.w	r1, r1, lr
 80007c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c4:	fbbc f8fe 	udiv	r8, ip, lr
 80007c8:	b2bc      	uxth	r4, r7
 80007ca:	fb0e cc18 	mls	ip, lr, r8, ip
 80007ce:	fb08 f904 	mul.w	r9, r8, r4
 80007d2:	0c0a      	lsrs	r2, r1, #16
 80007d4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80007d8:	40b0      	lsls	r0, r6
 80007da:	4591      	cmp	r9, r2
 80007dc:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80007e0:	b280      	uxth	r0, r0
 80007e2:	d93e      	bls.n	8000862 <__udivmoddi4+0x2ee>
 80007e4:	18ba      	adds	r2, r7, r2
 80007e6:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80007ea:	d201      	bcs.n	80007f0 <__udivmoddi4+0x27c>
 80007ec:	4591      	cmp	r9, r2
 80007ee:	d81f      	bhi.n	8000830 <__udivmoddi4+0x2bc>
 80007f0:	eba2 0209 	sub.w	r2, r2, r9
 80007f4:	fbb2 f9fe 	udiv	r9, r2, lr
 80007f8:	fb09 f804 	mul.w	r8, r9, r4
 80007fc:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000800:	b28a      	uxth	r2, r1
 8000802:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000806:	4542      	cmp	r2, r8
 8000808:	d229      	bcs.n	800085e <__udivmoddi4+0x2ea>
 800080a:	18ba      	adds	r2, r7, r2
 800080c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000810:	d2c2      	bcs.n	8000798 <__udivmoddi4+0x224>
 8000812:	4542      	cmp	r2, r8
 8000814:	d2c0      	bcs.n	8000798 <__udivmoddi4+0x224>
 8000816:	f1a9 0102 	sub.w	r1, r9, #2
 800081a:	443a      	add	r2, r7
 800081c:	e7bc      	b.n	8000798 <__udivmoddi4+0x224>
 800081e:	45c6      	cmp	lr, r8
 8000820:	d29b      	bcs.n	800075a <__udivmoddi4+0x1e6>
 8000822:	ebb8 0302 	subs.w	r3, r8, r2
 8000826:	eb6c 0c07 	sbc.w	ip, ip, r7
 800082a:	3801      	subs	r0, #1
 800082c:	46e1      	mov	r9, ip
 800082e:	e794      	b.n	800075a <__udivmoddi4+0x1e6>
 8000830:	eba7 0909 	sub.w	r9, r7, r9
 8000834:	444a      	add	r2, r9
 8000836:	fbb2 f9fe 	udiv	r9, r2, lr
 800083a:	f1a8 0c02 	sub.w	ip, r8, #2
 800083e:	fb09 f804 	mul.w	r8, r9, r4
 8000842:	e7db      	b.n	80007fc <__udivmoddi4+0x288>
 8000844:	4603      	mov	r3, r0
 8000846:	e77d      	b.n	8000744 <__udivmoddi4+0x1d0>
 8000848:	46d0      	mov	r8, sl
 800084a:	e765      	b.n	8000718 <__udivmoddi4+0x1a4>
 800084c:	4608      	mov	r0, r1
 800084e:	e6fa      	b.n	8000646 <__udivmoddi4+0xd2>
 8000850:	443b      	add	r3, r7
 8000852:	3a02      	subs	r2, #2
 8000854:	e730      	b.n	80006b8 <__udivmoddi4+0x144>
 8000856:	f1ac 0c02 	sub.w	ip, ip, #2
 800085a:	443b      	add	r3, r7
 800085c:	e719      	b.n	8000692 <__udivmoddi4+0x11e>
 800085e:	4649      	mov	r1, r9
 8000860:	e79a      	b.n	8000798 <__udivmoddi4+0x224>
 8000862:	eba2 0209 	sub.w	r2, r2, r9
 8000866:	fbb2 f9fe 	udiv	r9, r2, lr
 800086a:	46c4      	mov	ip, r8
 800086c:	fb09 f804 	mul.w	r8, r9, r4
 8000870:	e7c4      	b.n	80007fc <__udivmoddi4+0x288>
 8000872:	bf00      	nop

08000874 <__aeabi_idiv0>:
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop

08000878 <DWT_Init>:
#include "dwt_delay.h"
#include "core_cm3.h"

void DWT_Init(void) {
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <DWT_Init+0x2c>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <DWT_Init+0x2c>)
 8000882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000886:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <DWT_Init+0x30>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <DWT_Init+0x30>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a05      	ldr	r2, [pc, #20]	@ (80008a8 <DWT_Init+0x30>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6013      	str	r3, [r2, #0]
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000edf0 	.word	0xe000edf0
 80008a8:	e0001000 	.word	0xe0001000

080008ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4a06      	ldr	r2, [pc, #24]	@ (80008d4 <vApplicationGetIdleTaskMemory+0x28>)
 80008bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	4a05      	ldr	r2, [pc, #20]	@ (80008d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80008c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2280      	movs	r2, #128	@ 0x80
 80008c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	20000038 	.word	0x20000038
 80008d8:	2000008c 	.word	0x2000008c

080008dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
	osThreadDef(MotorControlTas, StartMotorControlTask, osPriorityHigh, 0, 256);
	osThreadDef(SensorTask, StartSensorTask, osPriorityAboveNormal, 0, 256);
	osThreadDef(DecisionTask, StartDecisionTask, osPriorityHigh, 0, 256);


}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	@ 0x28
 80008ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b35      	ldr	r3, [pc, #212]	@ (80009d4 <MX_GPIO_Init+0xec>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a34      	ldr	r2, [pc, #208]	@ (80009d4 <MX_GPIO_Init+0xec>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b32      	ldr	r3, [pc, #200]	@ (80009d4 <MX_GPIO_Init+0xec>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	4b2f      	ldr	r3, [pc, #188]	@ (80009d4 <MX_GPIO_Init+0xec>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	4a2e      	ldr	r2, [pc, #184]	@ (80009d4 <MX_GPIO_Init+0xec>)
 800091c:	f043 0320 	orr.w	r3, r3, #32
 8000920:	61d3      	str	r3, [r2, #28]
 8000922:	4b2c      	ldr	r3, [pc, #176]	@ (80009d4 <MX_GPIO_Init+0xec>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	f003 0320 	and.w	r3, r3, #32
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b29      	ldr	r3, [pc, #164]	@ (80009d4 <MX_GPIO_Init+0xec>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	4a28      	ldr	r2, [pc, #160]	@ (80009d4 <MX_GPIO_Init+0xec>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	61d3      	str	r3, [r2, #28]
 800093a:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <MX_GPIO_Init+0xec>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <MX_GPIO_Init+0xec>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a22      	ldr	r2, [pc, #136]	@ (80009d4 <MX_GPIO_Init+0xec>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	61d3      	str	r3, [r2, #28]
 8000952:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <MX_GPIO_Init+0xec>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2133      	movs	r1, #51	@ 0x33
 8000962:	481d      	ldr	r0, [pc, #116]	@ (80009d8 <MX_GPIO_Init+0xf0>)
 8000964:	f000 fe94 	bl	8001690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800096e:	481b      	ldr	r0, [pc, #108]	@ (80009dc <MX_GPIO_Init+0xf4>)
 8000970:	f000 fe8e 	bl	8001690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000974:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4815      	ldr	r0, [pc, #84]	@ (80009e0 <MX_GPIO_Init+0xf8>)
 800098c:	f000 fcf0 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000990:	2333      	movs	r3, #51	@ 0x33
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	480c      	ldr	r0, [pc, #48]	@ (80009d8 <MX_GPIO_Init+0xf0>)
 80009a8:	f000 fce2 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80009ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_GPIO_Init+0xf4>)
 80009c6:	f000 fcd3 	bl	8001370 <HAL_GPIO_Init>

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	@ 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40020800 	.word	0x40020800

080009e4 <Main_Init>:
void MX_TIM2_Init(void);
void MX_TIM3_Init(void);
void MX_USART2_UART_Init(void);
void DWT_Init(void);

void Main_Init(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  motorCommandQueue = xQueueCreate(5, sizeof(MotorCommand_t));
 80009e8:	2200      	movs	r2, #0
 80009ea:	2106      	movs	r1, #6
 80009ec:	2005      	movs	r0, #5
 80009ee:	f002 fd03 	bl	80033f8 <xQueueGenericCreate>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <Main_Init+0x3c>)
 80009f6:	6013      	str	r3, [r2, #0]
  sensorDataQueue = xQueueCreate(5, sizeof(uint32_t));
 80009f8:	2200      	movs	r2, #0
 80009fa:	2104      	movs	r1, #4
 80009fc:	2005      	movs	r0, #5
 80009fe:	f002 fcfb 	bl	80033f8 <xQueueGenericCreate>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4a07      	ldr	r2, [pc, #28]	@ (8000a24 <Main_Init+0x40>)
 8000a06:	6013      	str	r3, [r2, #0]

  if(motorCommandQueue == NULL || sensorDataQueue == NULL) {
 8000a08:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <Main_Init+0x3c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d003      	beq.n	8000a18 <Main_Init+0x34>
 8000a10:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <Main_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d101      	bne.n	8000a1c <Main_Init+0x38>
    Error_Handler();
 8000a18:	f000 f874 	bl	8000b04 <Error_Handler>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000028c 	.word	0x2000028c
 8000a24:	20000290 	.word	0x20000290

08000a28 <main>:


int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2c:	f000 fb23 	bl	8001076 <HAL_Init>

  SystemClock_Config();
 8000a30:	f000 f822 	bl	8000a78 <SystemClock_Config>

  MX_GPIO_Init();
 8000a34:	f7ff ff58 	bl	80008e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a38:	f000 f936 	bl	8000ca8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a3c:	f000 f986 	bl	8000d4c <MX_TIM3_Init>

  MX_USART2_UART_Init();
 8000a40:	f000 fa86 	bl	8000f50 <MX_USART2_UART_Init>

  Main_Init();
 8000a44:	f7ff ffce 	bl	80009e4 <Main_Init>
  DWT_Init();
 8000a48:	f7ff ff16 	bl	8000878 <DWT_Init>
  //MX_GPIO_Init();


  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4808      	ldr	r0, [pc, #32]	@ (8000a70 <main+0x48>)
 8000a50:	f001 fc6c 	bl	800232c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a54:	2104      	movs	r1, #4
 8000a56:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <main+0x48>)
 8000a58:	f001 fc68 	bl	800232c <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <main+0x4c>)
 8000a60:	f001 fd3a 	bl	80024d8 <HAL_TIM_IC_Start_IT>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000a64:	f7ff ff3a 	bl	80008dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a68:	f002 fbde 	bl	8003228 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <main+0x44>
 8000a70:	200002d4 	.word	0x200002d4
 8000a74:	20000294 	.word	0x20000294

08000a78 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b092      	sub	sp, #72	@ 0x48
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	2234      	movs	r2, #52	@ 0x34
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f003 ff40 	bl	800490c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9a:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <SystemClock_Config+0x88>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000aa2:	4a17      	ldr	r2, [pc, #92]	@ (8000b00 <SystemClock_Config+0x88>)
 8000aa4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000aa8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab2:	2310      	movs	r3, #16
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 fdfe 	bl	80016c0 <HAL_RCC_OscConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000aca:	f000 f81b 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ace:	230f      	movs	r3, #15
 8000ad0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 f91a 	bl	8001d20 <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000af2:	f000 f807 	bl	8000b04 <Error_Handler>
  }
}
 8000af6:	bf00      	nop
 8000af8:	3748      	adds	r7, #72	@ 0x48
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40007000 	.word	0x40007000

08000b04 <Error_Handler>:


void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000b16:	4b1b      	ldr	r3, [pc, #108]	@ (8000b84 <HAL_MspInit+0x74>)
 8000b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000b84 <HAL_MspInit+0x74>)
 8000b1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b20:	6253      	str	r3, [r2, #36]	@ 0x24
 8000b22:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <HAL_MspInit+0x74>)
 8000b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <HAL_MspInit+0x74>)
 8000b30:	6a1b      	ldr	r3, [r3, #32]
 8000b32:	4a14      	ldr	r2, [pc, #80]	@ (8000b84 <HAL_MspInit+0x74>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6213      	str	r3, [r2, #32]
 8000b3a:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <HAL_MspInit+0x74>)
 8000b3c:	6a1b      	ldr	r3, [r3, #32]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <HAL_MspInit+0x74>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b84 <HAL_MspInit+0x74>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b50:	6253      	str	r3, [r2, #36]	@ 0x24
 8000b52:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <HAL_MspInit+0x74>)
 8000b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	210f      	movs	r1, #15
 8000b62:	f06f 0001 	mvn.w	r0, #1
 8000b66:	f000 fbcc 	bl	8001302 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2105      	movs	r1, #5
 8000b6e:	2005      	movs	r0, #5
 8000b70:	f000 fbc7 	bl	8001302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000b74:	2005      	movs	r0, #5
 8000b76:	f000 fbe0 	bl	800133a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <SysTick_Handler>:
static uint8_t captureState = 0;



void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 fac6 	bl	800111c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b90:	f003 fa44 	bl	800401c <xTaskGetSchedulerState>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d001      	beq.n	8000b9e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b9a:	f003 fc55 	bl	8004448 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
	if(__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_CC1)) {
 8000baa:	4b38      	ldr	r3, [pc, #224]	@ (8000c8c <TIM2_IRQHandler+0xe8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d165      	bne.n	8000c84 <TIM2_IRQHandler+0xe0>
	    __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 8000bb8:	4b34      	ldr	r3, [pc, #208]	@ (8000c8c <TIM2_IRQHandler+0xe8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f06f 0202 	mvn.w	r2, #2
 8000bc0:	611a      	str	r2, [r3, #16]

	    if(ultrasonic.capture_state == 0) {
 8000bc2:	4b33      	ldr	r3, [pc, #204]	@ (8000c90 <TIM2_IRQHandler+0xec>)
 8000bc4:	7a1b      	ldrb	r3, [r3, #8]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d11a      	bne.n	8000c00 <TIM2_IRQHandler+0x5c>
	      ultrasonic.rising_edge = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000bca:	2100      	movs	r1, #0
 8000bcc:	482f      	ldr	r0, [pc, #188]	@ (8000c8c <TIM2_IRQHandler+0xe8>)
 8000bce:	f001 feb1 	bl	8002934 <HAL_TIM_ReadCapturedValue>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a2e      	ldr	r2, [pc, #184]	@ (8000c90 <TIM2_IRQHandler+0xec>)
 8000bd6:	6013      	str	r3, [r2, #0]
	      __HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000bd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c8c <TIM2_IRQHandler+0xe8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	6a1a      	ldr	r2, [r3, #32]
 8000bde:	4b2b      	ldr	r3, [pc, #172]	@ (8000c8c <TIM2_IRQHandler+0xe8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f022 020a 	bic.w	r2, r2, #10
 8000be6:	621a      	str	r2, [r3, #32]
 8000be8:	4b28      	ldr	r3, [pc, #160]	@ (8000c8c <TIM2_IRQHandler+0xe8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6a1a      	ldr	r2, [r3, #32]
 8000bee:	4b27      	ldr	r3, [pc, #156]	@ (8000c8c <TIM2_IRQHandler+0xe8>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f042 0202 	orr.w	r2, r2, #2
 8000bf6:	621a      	str	r2, [r3, #32]
	      ultrasonic.capture_state = 1;
 8000bf8:	4b25      	ldr	r3, [pc, #148]	@ (8000c90 <TIM2_IRQHandler+0xec>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	721a      	strb	r2, [r3, #8]

	      uint32_t distance_cm = (uint32_t)(pulse_width * 0.01715f);
	      xQueueSendFromISR(sensorDataQueue, &distance_cm, NULL);
	    }
	  }
}
 8000bfe:	e041      	b.n	8000c84 <TIM2_IRQHandler+0xe0>
	      ultrasonic.falling_edge = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000c00:	2100      	movs	r1, #0
 8000c02:	4822      	ldr	r0, [pc, #136]	@ (8000c8c <TIM2_IRQHandler+0xe8>)
 8000c04:	f001 fe96 	bl	8002934 <HAL_TIM_ReadCapturedValue>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4a21      	ldr	r2, [pc, #132]	@ (8000c90 <TIM2_IRQHandler+0xec>)
 8000c0c:	6053      	str	r3, [r2, #4]
	      __HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c8c <TIM2_IRQHandler+0xe8>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6a1a      	ldr	r2, [r3, #32]
 8000c14:	4b1d      	ldr	r3, [pc, #116]	@ (8000c8c <TIM2_IRQHandler+0xe8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 020a 	bic.w	r2, r2, #10
 8000c1c:	621a      	str	r2, [r3, #32]
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c8c <TIM2_IRQHandler+0xe8>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <TIM2_IRQHandler+0xe8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	6a12      	ldr	r2, [r2, #32]
 8000c28:	621a      	str	r2, [r3, #32]
	      ultrasonic.capture_state = 0;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <TIM2_IRQHandler+0xec>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	721a      	strb	r2, [r3, #8]
	      uint32_t pulse_width = (ultrasonic.falling_edge > ultrasonic.rising_edge) ?
 8000c30:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <TIM2_IRQHandler+0xec>)
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	4b16      	ldr	r3, [pc, #88]	@ (8000c90 <TIM2_IRQHandler+0xec>)
 8000c36:	681b      	ldr	r3, [r3, #0]
	        (ultrasonic.falling_edge - ultrasonic.rising_edge) :
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d905      	bls.n	8000c48 <TIM2_IRQHandler+0xa4>
 8000c3c:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <TIM2_IRQHandler+0xec>)
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <TIM2_IRQHandler+0xec>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	e007      	b.n	8000c58 <TIM2_IRQHandler+0xb4>
	        (0xFFFF - ultrasonic.rising_edge + ultrasonic.falling_edge);
 8000c48:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <TIM2_IRQHandler+0xec>)
 8000c4a:	685a      	ldr	r2, [r3, #4]
 8000c4c:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <TIM2_IRQHandler+0xec>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	1ad3      	subs	r3, r2, r3
	        (ultrasonic.falling_edge - ultrasonic.rising_edge) :
 8000c52:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000c56:	33ff      	adds	r3, #255	@ 0xff
	      uint32_t pulse_width = (ultrasonic.falling_edge > ultrasonic.rising_edge) ?
 8000c58:	607b      	str	r3, [r7, #4]
	      uint32_t distance_cm = (uint32_t)(pulse_width * 0.01715f);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff fbfa 	bl	8000454 <__aeabi_ui2f>
 8000c60:	4603      	mov	r3, r0
 8000c62:	490c      	ldr	r1, [pc, #48]	@ (8000c94 <TIM2_IRQHandler+0xf0>)
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fa8b 	bl	8000180 <__aeabi_fmul>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fc49 	bl	8000504 <__aeabi_f2uiz>
 8000c72:	4603      	mov	r3, r0
 8000c74:	603b      	str	r3, [r7, #0]
	      xQueueSendFromISR(sensorDataQueue, &distance_cm, NULL);
 8000c76:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <TIM2_IRQHandler+0xf4>)
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	4639      	mov	r1, r7
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f002 fc18 	bl	80034b4 <xQueueGenericSendFromISR>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000294 	.word	0x20000294
 8000c90:	2000002c 	.word	0x2000002c
 8000c94:	3c8c7e28 	.word	0x3c8c7e28
 8000c98:	20000290 	.word	0x20000290

08000c9c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cb8:	463b      	mov	r3, r7
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc4:	4b20      	ldr	r3, [pc, #128]	@ (8000d48 <MX_TIM2_Init+0xa0>)
 8000cc6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <MX_TIM2_Init+0xa0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <MX_TIM2_Init+0xa0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <MX_TIM2_Init+0xa0>)
 8000cda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <MX_TIM2_Init+0xa0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <MX_TIM2_Init+0xa0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000cec:	4816      	ldr	r0, [pc, #88]	@ (8000d48 <MX_TIM2_Init+0xa0>)
 8000cee:	f001 fbb3 	bl	8002458 <HAL_TIM_IC_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cf8:	f7ff ff04 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480f      	ldr	r0, [pc, #60]	@ (8000d48 <MX_TIM2_Init+0xa0>)
 8000d0c:	f002 f8fa 	bl	8002f04 <HAL_TIMEx_MasterConfigSynchronization>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d16:	f7ff fef5 	bl	8000b04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_TIM2_Init+0xa0>)
 8000d32:	f001 fca1 	bl	8002678 <HAL_TIM_IC_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000d3c:	f7ff fee2 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000294 	.word	0x20000294

08000d4c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d68:	4b27      	ldr	r3, [pc, #156]	@ (8000e08 <MX_TIM3_Init+0xbc>)
 8000d6a:	4a28      	ldr	r2, [pc, #160]	@ (8000e0c <MX_TIM3_Init+0xc0>)
 8000d6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8000d6e:	4b26      	ldr	r3, [pc, #152]	@ (8000e08 <MX_TIM3_Init+0xbc>)
 8000d70:	221f      	movs	r2, #31
 8000d72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d74:	4b24      	ldr	r3, [pc, #144]	@ (8000e08 <MX_TIM3_Init+0xbc>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000d7a:	4b23      	ldr	r3, [pc, #140]	@ (8000e08 <MX_TIM3_Init+0xbc>)
 8000d7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d82:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <MX_TIM3_Init+0xbc>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <MX_TIM3_Init+0xbc>)
 8000d8a:	2280      	movs	r2, #128	@ 0x80
 8000d8c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d8e:	481e      	ldr	r0, [pc, #120]	@ (8000e08 <MX_TIM3_Init+0xbc>)
 8000d90:	f001 fa8c 	bl	80022ac <HAL_TIM_PWM_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d9a:	f7ff feb3 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	4619      	mov	r1, r3
 8000dac:	4816      	ldr	r0, [pc, #88]	@ (8000e08 <MX_TIM3_Init+0xbc>)
 8000dae:	f002 f8a9 	bl	8002f04 <HAL_TIMEx_MasterConfigSynchronization>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000db8:	f7ff fea4 	bl	8000b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbc:	2360      	movs	r3, #96	@ 0x60
 8000dbe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480d      	ldr	r0, [pc, #52]	@ (8000e08 <MX_TIM3_Init+0xbc>)
 8000dd4:	f001 fcec 	bl	80027b0 <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000dde:	f7ff fe91 	bl	8000b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000de2:	463b      	mov	r3, r7
 8000de4:	2204      	movs	r2, #4
 8000de6:	4619      	mov	r1, r3
 8000de8:	4807      	ldr	r0, [pc, #28]	@ (8000e08 <MX_TIM3_Init+0xbc>)
 8000dea:	f001 fce1 	bl	80027b0 <HAL_TIM_PWM_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8000df4:	f7ff fe86 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000df8:	4803      	ldr	r0, [pc, #12]	@ (8000e08 <MX_TIM3_Init+0xbc>)
 8000dfa:	f000 f871 	bl	8000ee0 <HAL_TIM_MspPostInit>

}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200002d4 	.word	0x200002d4
 8000e0c:	40000400 	.word	0x40000400

08000e10 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e30:	d130      	bne.n	8000e94 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e32:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <HAL_TIM_IC_MspInit+0x8c>)
 8000e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e36:	4a19      	ldr	r2, [pc, #100]	@ (8000e9c <HAL_TIM_IC_MspInit+0x8c>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6253      	str	r3, [r2, #36]	@ 0x24
 8000e3e:	4b17      	ldr	r3, [pc, #92]	@ (8000e9c <HAL_TIM_IC_MspInit+0x8c>)
 8000e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <HAL_TIM_IC_MspInit+0x8c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a13      	ldr	r2, [pc, #76]	@ (8000e9c <HAL_TIM_IC_MspInit+0x8c>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <HAL_TIM_IC_MspInit+0x8c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8000e62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e74:	2301      	movs	r3, #1
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4808      	ldr	r0, [pc, #32]	@ (8000ea0 <HAL_TIM_IC_MspInit+0x90>)
 8000e80:	f000 fa76 	bl	8001370 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2105      	movs	r1, #5
 8000e88:	201c      	movs	r0, #28
 8000e8a:	f000 fa3a 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e8e:	201c      	movs	r0, #28
 8000e90:	f000 fa53 	bl	800133a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	@ 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <HAL_TIM_PWM_MspInit+0x34>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d10b      	bne.n	8000ece <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <HAL_TIM_PWM_MspInit+0x38>)
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eba:	4a08      	ldr	r2, [pc, #32]	@ (8000edc <HAL_TIM_PWM_MspInit+0x38>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6253      	str	r3, [r2, #36]	@ 0x24
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_TIM_PWM_MspInit+0x38>)
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	40000400 	.word	0x40000400
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a11      	ldr	r2, [pc, #68]	@ (8000f44 <HAL_TIM_MspPostInit+0x64>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d11b      	bne.n	8000f3a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_TIM_MspPostInit+0x68>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	4a10      	ldr	r2, [pc, #64]	@ (8000f48 <HAL_TIM_MspPostInit+0x68>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	61d3      	str	r3, [r2, #28]
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_TIM_MspPostInit+0x68>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin;
 8000f1a:	23c0      	movs	r3, #192	@ 0xc0
 8000f1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <HAL_TIM_MspPostInit+0x6c>)
 8000f36:	f000 fa1b 	bl	8001370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40000400 	.word	0x40000400
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020000 	.word	0x40020000

08000f50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f54:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <MX_USART2_UART_Init+0x50>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f88:	f002 f81a 	bl	8002fc0 <HAL_UART_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f92:	f7ff fdb7 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000314 	.word	0x20000314
 8000fa0:	40004400 	.word	0x40004400

08000fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	@ 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a17      	ldr	r2, [pc, #92]	@ (8001020 <HAL_UART_MspInit+0x7c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d127      	bne.n	8001016 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc6:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <HAL_UART_MspInit+0x80>)
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fca:	4a16      	ldr	r2, [pc, #88]	@ (8001024 <HAL_UART_MspInit+0x80>)
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd0:	6253      	str	r3, [r2, #36]	@ 0x24
 8000fd2:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <HAL_UART_MspInit+0x80>)
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <HAL_UART_MspInit+0x80>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a10      	ldr	r2, [pc, #64]	@ (8001024 <HAL_UART_MspInit+0x80>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <HAL_UART_MspInit+0x80>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001006:	2307      	movs	r3, #7
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	@ (8001028 <HAL_UART_MspInit+0x84>)
 8001012:	f000 f9ad 	bl	8001370 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	@ 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40004400 	.word	0x40004400
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000

0800102c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 800102c:	f7ff fe36 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001030:	480b      	ldr	r0, [pc, #44]	@ (8001060 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001032:	490c      	ldr	r1, [pc, #48]	@ (8001064 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001034:	4a0c      	ldr	r2, [pc, #48]	@ (8001068 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a09      	ldr	r2, [pc, #36]	@ (800106c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001048:	4c09      	ldr	r4, [pc, #36]	@ (8001070 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001056:	f003 fc61 	bl	800491c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800105a:	f7ff fce5 	bl	8000a28 <main>
  bx lr
 800105e:	4770      	bx	lr
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001068:	080049d4 	.word	0x080049d4
  ldr r2, =_sbss
 800106c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001070:	20002600 	.word	0x20002600

08001074 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC1_IRQHandler>

08001076 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f933 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001086:	200f      	movs	r0, #15
 8001088:	f000 f80e 	bl	80010a8 <HAL_InitTick>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	e001      	b.n	800109c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001098:	f7ff fd3a 	bl	8000b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800109c:	79fb      	ldrb	r3, [r7, #7]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010b4:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <HAL_InitTick+0x68>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d022      	beq.n	8001102 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <HAL_InitTick+0x6c>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <HAL_InitTick+0x68>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f940 	bl	8001356 <HAL_SYSTICK_Config>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10f      	bne.n	80010fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	d809      	bhi.n	80010f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e2:	2200      	movs	r2, #0
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010ea:	f000 f90a 	bl	8001302 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <HAL_InitTick+0x70>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	e007      	b.n	8001106 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	e004      	b.n	8001106 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	e001      	b.n	8001106 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000008 	.word	0x20000008
 8001114:	20000000 	.word	0x20000000
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001120:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_IncTick+0x1c>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <HAL_IncTick+0x20>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4413      	add	r3, r2
 800112a:	4a03      	ldr	r2, [pc, #12]	@ (8001138 <HAL_IncTick+0x1c>)
 800112c:	6013      	str	r3, [r2, #0]
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	2000035c 	.word	0x2000035c
 800113c:	20000008 	.word	0x20000008

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b02      	ldr	r3, [pc, #8]	@ (8001150 <HAL_GetTick+0x10>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	2000035c 	.word	0x2000035c

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800117c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db0b      	blt.n	80011e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 021f 	and.w	r2, r3, #31
 80011d0:	4906      	ldr	r1, [pc, #24]	@ (80011ec <__NVIC_EnableIRQ+0x34>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f202 	lsl.w	r2, r0, r2
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	db0a      	blt.n	800121a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	490c      	ldr	r1, [pc, #48]	@ (800123c <__NVIC_SetPriority+0x4c>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	440b      	add	r3, r1
 8001214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001218:	e00a      	b.n	8001230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4908      	ldr	r1, [pc, #32]	@ (8001240 <__NVIC_SetPriority+0x50>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	3b04      	subs	r3, #4
 8001228:	0112      	lsls	r2, r2, #4
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	440b      	add	r3, r1
 800122e:	761a      	strb	r2, [r3, #24]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e100 	.word	0xe000e100
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	@ 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f1c3 0307 	rsb	r3, r3, #7
 800125e:	2b04      	cmp	r3, #4
 8001260:	bf28      	it	cs
 8001262:	2304      	movcs	r3, #4
 8001264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3304      	adds	r3, #4
 800126a:	2b06      	cmp	r3, #6
 800126c:	d902      	bls.n	8001274 <NVIC_EncodePriority+0x30>
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3b03      	subs	r3, #3
 8001272:	e000      	b.n	8001276 <NVIC_EncodePriority+0x32>
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43da      	mvns	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800128c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43d9      	mvns	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	4313      	orrs	r3, r2
         );
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3724      	adds	r7, #36	@ 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012cc:	f7ff ff90 	bl	80011f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff2d 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001314:	f7ff ff42 	bl	800119c <__NVIC_GetPriorityGrouping>
 8001318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f7ff ff90 	bl	8001244 <NVIC_EncodePriority>
 8001324:	4602      	mov	r2, r0
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff5f 	bl	80011f0 <__NVIC_SetPriority>
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff35 	bl	80011b8 <__NVIC_EnableIRQ>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffa2 	bl	80012a8 <SysTick_Config>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001386:	e160      	b.n	800164a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	2101      	movs	r1, #1
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	4013      	ands	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 8152 	beq.w	8001644 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d005      	beq.n	80013b8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d130      	bne.n	800141a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80013ee:	2201      	movs	r2, #1
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	f003 0201 	and.w	r2, r3, #1
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b03      	cmp	r3, #3
 8001424:	d017      	beq.n	8001456 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d123      	bne.n	80014aa <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	08da      	lsrs	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3208      	adds	r2, #8
 800146a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	691a      	ldr	r2, [r3, #16]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	6939      	ldr	r1, [r7, #16]
 80014a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2203      	movs	r2, #3
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0203 	and.w	r2, r3, #3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 80ac 	beq.w	8001644 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001668 <HAL_GPIO_Init+0x2f8>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001668 <HAL_GPIO_Init+0x2f8>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6213      	str	r3, [r2, #32]
 80014f8:	4b5b      	ldr	r3, [pc, #364]	@ (8001668 <HAL_GPIO_Init+0x2f8>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001504:	4a59      	ldr	r2, [pc, #356]	@ (800166c <HAL_GPIO_Init+0x2fc>)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001510:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a51      	ldr	r2, [pc, #324]	@ (8001670 <HAL_GPIO_Init+0x300>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d025      	beq.n	800157c <HAL_GPIO_Init+0x20c>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a50      	ldr	r2, [pc, #320]	@ (8001674 <HAL_GPIO_Init+0x304>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d01f      	beq.n	8001578 <HAL_GPIO_Init+0x208>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a4f      	ldr	r2, [pc, #316]	@ (8001678 <HAL_GPIO_Init+0x308>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d019      	beq.n	8001574 <HAL_GPIO_Init+0x204>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a4e      	ldr	r2, [pc, #312]	@ (800167c <HAL_GPIO_Init+0x30c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d013      	beq.n	8001570 <HAL_GPIO_Init+0x200>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a4d      	ldr	r2, [pc, #308]	@ (8001680 <HAL_GPIO_Init+0x310>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d00d      	beq.n	800156c <HAL_GPIO_Init+0x1fc>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a4c      	ldr	r2, [pc, #304]	@ (8001684 <HAL_GPIO_Init+0x314>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d007      	beq.n	8001568 <HAL_GPIO_Init+0x1f8>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a4b      	ldr	r2, [pc, #300]	@ (8001688 <HAL_GPIO_Init+0x318>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d101      	bne.n	8001564 <HAL_GPIO_Init+0x1f4>
 8001560:	2306      	movs	r3, #6
 8001562:	e00c      	b.n	800157e <HAL_GPIO_Init+0x20e>
 8001564:	2307      	movs	r3, #7
 8001566:	e00a      	b.n	800157e <HAL_GPIO_Init+0x20e>
 8001568:	2305      	movs	r3, #5
 800156a:	e008      	b.n	800157e <HAL_GPIO_Init+0x20e>
 800156c:	2304      	movs	r3, #4
 800156e:	e006      	b.n	800157e <HAL_GPIO_Init+0x20e>
 8001570:	2303      	movs	r3, #3
 8001572:	e004      	b.n	800157e <HAL_GPIO_Init+0x20e>
 8001574:	2302      	movs	r3, #2
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0x20e>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_GPIO_Init+0x20e>
 800157c:	2300      	movs	r3, #0
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	f002 0203 	and.w	r2, r2, #3
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	4093      	lsls	r3, r2
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800158e:	4937      	ldr	r1, [pc, #220]	@ (800166c <HAL_GPIO_Init+0x2fc>)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159c:	4b3b      	ldr	r3, [pc, #236]	@ (800168c <HAL_GPIO_Init+0x31c>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015c0:	4a32      	ldr	r2, [pc, #200]	@ (800168c <HAL_GPIO_Init+0x31c>)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c6:	4b31      	ldr	r3, [pc, #196]	@ (800168c <HAL_GPIO_Init+0x31c>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015ea:	4a28      	ldr	r2, [pc, #160]	@ (800168c <HAL_GPIO_Init+0x31c>)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015f0:	4b26      	ldr	r3, [pc, #152]	@ (800168c <HAL_GPIO_Init+0x31c>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001614:	4a1d      	ldr	r2, [pc, #116]	@ (800168c <HAL_GPIO_Init+0x31c>)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800161a:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <HAL_GPIO_Init+0x31c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800163e:	4a13      	ldr	r2, [pc, #76]	@ (800168c <HAL_GPIO_Init+0x31c>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa22 f303 	lsr.w	r3, r2, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	f47f ae97 	bne.w	8001388 <HAL_GPIO_Init+0x18>
  }
}
 800165a:	bf00      	nop
 800165c:	bf00      	nop
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40010000 	.word	0x40010000
 8001670:	40020000 	.word	0x40020000
 8001674:	40020400 	.word	0x40020400
 8001678:	40020800 	.word	0x40020800
 800167c:	40020c00 	.word	0x40020c00
 8001680:	40021000 	.word	0x40021000
 8001684:	40021400 	.word	0x40021400
 8001688:	40021800 	.word	0x40021800
 800168c:	40010400 	.word	0x40010400

08001690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	807b      	strh	r3, [r7, #2]
 800169c:	4613      	mov	r3, r2
 800169e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016a0:	787b      	ldrb	r3, [r7, #1]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80016ac:	e003      	b.n	80016b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80016ae:	887b      	ldrh	r3, [r7, #2]
 80016b0:	041a      	lsls	r2, r3, #16
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	619a      	str	r2, [r3, #24]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e31d      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d2:	4b94      	ldr	r3, [pc, #592]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016dc:	4b91      	ldr	r3, [pc, #580]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d07b      	beq.n	80017ea <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d006      	beq.n	8001706 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	d10f      	bne.n	800171e <HAL_RCC_OscConfig+0x5e>
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001704:	d10b      	bne.n	800171e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001706:	4b87      	ldr	r3, [pc, #540]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d06a      	beq.n	80017e8 <HAL_RCC_OscConfig+0x128>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d166      	bne.n	80017e8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e2f7      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d106      	bne.n	8001734 <HAL_RCC_OscConfig+0x74>
 8001726:	4b7f      	ldr	r3, [pc, #508]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a7e      	ldr	r2, [pc, #504]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e02d      	b.n	8001790 <HAL_RCC_OscConfig+0xd0>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10c      	bne.n	8001756 <HAL_RCC_OscConfig+0x96>
 800173c:	4b79      	ldr	r3, [pc, #484]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a78      	ldr	r2, [pc, #480]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 8001742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b76      	ldr	r3, [pc, #472]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a75      	ldr	r2, [pc, #468]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e01c      	b.n	8001790 <HAL_RCC_OscConfig+0xd0>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b05      	cmp	r3, #5
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0xb8>
 800175e:	4b71      	ldr	r3, [pc, #452]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a70      	ldr	r2, [pc, #448]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 8001764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b6e      	ldr	r3, [pc, #440]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a6d      	ldr	r2, [pc, #436]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e00b      	b.n	8001790 <HAL_RCC_OscConfig+0xd0>
 8001778:	4b6a      	ldr	r3, [pc, #424]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a69      	ldr	r2, [pc, #420]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 800177e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b67      	ldr	r3, [pc, #412]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a66      	ldr	r2, [pc, #408]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 800178a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800178e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d013      	beq.n	80017c0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fcd2 	bl	8001140 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fcce 	bl	8001140 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	@ 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e2ad      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0xe0>
 80017be:	e014      	b.n	80017ea <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fcbe 	bl	8001140 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fcba 	bl	8001140 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	@ 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e299      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017da:	4b52      	ldr	r3, [pc, #328]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x108>
 80017e6:	e000      	b.n	80017ea <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d05a      	beq.n	80018ac <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d119      	bne.n	8001836 <HAL_RCC_OscConfig+0x176>
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d116      	bne.n	8001836 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001808:	4b46      	ldr	r3, [pc, #280]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_OscConfig+0x160>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d001      	beq.n	8001820 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e276      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001820:	4b40      	ldr	r3, [pc, #256]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	493d      	ldr	r1, [pc, #244]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001834:	e03a      	b.n	80018ac <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d020      	beq.n	8001880 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183e:	4b3a      	ldr	r3, [pc, #232]	@ (8001928 <HAL_RCC_OscConfig+0x268>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fc7c 	bl	8001140 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800184c:	f7ff fc78 	bl	8001140 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e257      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800185e:	4b31      	ldr	r3, [pc, #196]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	4b2e      	ldr	r3, [pc, #184]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	492a      	ldr	r1, [pc, #168]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
 800187e:	e015      	b.n	80018ac <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001880:	4b29      	ldr	r3, [pc, #164]	@ (8001928 <HAL_RCC_OscConfig+0x268>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff fc5b 	bl	8001140 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800188e:	f7ff fc57 	bl	8001140 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e236      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018a0:	4b20      	ldr	r3, [pc, #128]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f0      	bne.n	800188e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0310 	and.w	r3, r3, #16
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80b8 	beq.w	8001a2a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d170      	bne.n	80019a2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018c0:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_OscConfig+0x218>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e21a      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1a      	ldr	r2, [r3, #32]
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d921      	bls.n	800192c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 fc7d 	bl	80021ec <RCC_SetFlashLatencyFromMSIRange>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e208      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018fc:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4906      	ldr	r1, [pc, #24]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 800190a:	4313      	orrs	r3, r2
 800190c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800190e:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	061b      	lsls	r3, r3, #24
 800191c:	4901      	ldr	r1, [pc, #4]	@ (8001924 <HAL_RCC_OscConfig+0x264>)
 800191e:	4313      	orrs	r3, r2
 8001920:	604b      	str	r3, [r1, #4]
 8001922:	e020      	b.n	8001966 <HAL_RCC_OscConfig+0x2a6>
 8001924:	40023800 	.word	0x40023800
 8001928:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192c:	4b99      	ldr	r3, [pc, #612]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	4996      	ldr	r1, [pc, #600]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 800193a:	4313      	orrs	r3, r2
 800193c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800193e:	4b95      	ldr	r3, [pc, #596]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	061b      	lsls	r3, r3, #24
 800194c:	4991      	ldr	r1, [pc, #580]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 800194e:	4313      	orrs	r3, r2
 8001950:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fc48 	bl	80021ec <RCC_SetFlashLatencyFromMSIRange>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e1d3      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	0b5b      	lsrs	r3, r3, #13
 800196c:	3301      	adds	r3, #1
 800196e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001976:	4a87      	ldr	r2, [pc, #540]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001978:	6892      	ldr	r2, [r2, #8]
 800197a:	0912      	lsrs	r2, r2, #4
 800197c:	f002 020f 	and.w	r2, r2, #15
 8001980:	4985      	ldr	r1, [pc, #532]	@ (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001982:	5c8a      	ldrb	r2, [r1, r2]
 8001984:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001986:	4a85      	ldr	r2, [pc, #532]	@ (8001b9c <HAL_RCC_OscConfig+0x4dc>)
 8001988:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800198a:	4b85      	ldr	r3, [pc, #532]	@ (8001ba0 <HAL_RCC_OscConfig+0x4e0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fb8a 	bl	80010a8 <HAL_InitTick>
 8001994:	4603      	mov	r3, r0
 8001996:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d045      	beq.n	8001a2a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	e1b5      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d029      	beq.n	80019fe <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019aa:	4b7e      	ldr	r3, [pc, #504]	@ (8001ba4 <HAL_RCC_OscConfig+0x4e4>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fbc6 	bl	8001140 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019b8:	f7ff fbc2 	bl	8001140 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e1a1      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019ca:	4b72      	ldr	r3, [pc, #456]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	496c      	ldr	r1, [pc, #432]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	4967      	ldr	r1, [pc, #412]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
 80019fc:	e015      	b.n	8001a2a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019fe:	4b69      	ldr	r3, [pc, #420]	@ (8001ba4 <HAL_RCC_OscConfig+0x4e4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb9c 	bl	8001140 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fb98 	bl	8001140 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e177      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a1e:	4b5d      	ldr	r3, [pc, #372]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d030      	beq.n	8001a98 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d016      	beq.n	8001a6c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ba8 <HAL_RCC_OscConfig+0x4e8>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a44:	f7ff fb7c 	bl	8001140 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fb78 	bl	8001140 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e157      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x38c>
 8001a6a:	e015      	b.n	8001a98 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6c:	4b4e      	ldr	r3, [pc, #312]	@ (8001ba8 <HAL_RCC_OscConfig+0x4e8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7ff fb65 	bl	8001140 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7ff fb61 	bl	8001140 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e140      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a8c:	4b41      	ldr	r3, [pc, #260]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f0      	bne.n	8001a7a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80b5 	beq.w	8001c10 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10d      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b37      	ldr	r3, [pc, #220]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aba:	4a36      	ldr	r2, [pc, #216]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac0:	6253      	str	r3, [r2, #36]	@ 0x24
 8001ac2:	4b34      	ldr	r3, [pc, #208]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad2:	4b36      	ldr	r3, [pc, #216]	@ (8001bac <HAL_RCC_OscConfig+0x4ec>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d118      	bne.n	8001b10 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ade:	4b33      	ldr	r3, [pc, #204]	@ (8001bac <HAL_RCC_OscConfig+0x4ec>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a32      	ldr	r2, [pc, #200]	@ (8001bac <HAL_RCC_OscConfig+0x4ec>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aea:	f7ff fb29 	bl	8001140 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af2:	f7ff fb25 	bl	8001140 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b64      	cmp	r3, #100	@ 0x64
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e104      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	4b29      	ldr	r3, [pc, #164]	@ (8001bac <HAL_RCC_OscConfig+0x4ec>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x466>
 8001b18:	4b1e      	ldr	r3, [pc, #120]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b22:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b24:	e02d      	b.n	8001b82 <HAL_RCC_OscConfig+0x4c2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x488>
 8001b2e:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b32:	4a18      	ldr	r2, [pc, #96]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001b34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b38:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b3a:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b3e:	4a15      	ldr	r2, [pc, #84]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001b40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001b44:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b46:	e01c      	b.n	8001b82 <HAL_RCC_OscConfig+0x4c2>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d10c      	bne.n	8001b6a <HAL_RCC_OscConfig+0x4aa>
 8001b50:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b54:	4a0f      	ldr	r2, [pc, #60]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001b56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b5a:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b60:	4a0c      	ldr	r2, [pc, #48]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b66:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b68:	e00b      	b.n	8001b82 <HAL_RCC_OscConfig+0x4c2>
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6e:	4a09      	ldr	r2, [pc, #36]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001b70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b74:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b76:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b7a:	4a06      	ldr	r2, [pc, #24]	@ (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001b7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001b80:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d024      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fad9 	bl	8001140 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b90:	e019      	b.n	8001bc6 <HAL_RCC_OscConfig+0x506>
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	080049ac 	.word	0x080049ac
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000004 	.word	0x20000004
 8001ba4:	42470020 	.word	0x42470020
 8001ba8:	42470680 	.word	0x42470680
 8001bac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fac6 	bl	8001140 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e0a3      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bc6:	4b54      	ldr	r3, [pc, #336]	@ (8001d18 <HAL_RCC_OscConfig+0x658>)
 8001bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0ee      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x4f0>
 8001bd2:	e014      	b.n	8001bfe <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fab4 	bl	8001140 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bdc:	f7ff fab0 	bl	8001140 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e08d      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bf2:	4b49      	ldr	r3, [pc, #292]	@ (8001d18 <HAL_RCC_OscConfig+0x658>)
 8001bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ee      	bne.n	8001bdc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c04:	4b44      	ldr	r3, [pc, #272]	@ (8001d18 <HAL_RCC_OscConfig+0x658>)
 8001c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c08:	4a43      	ldr	r2, [pc, #268]	@ (8001d18 <HAL_RCC_OscConfig+0x658>)
 8001c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d079      	beq.n	8001d0c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d056      	beq.n	8001ccc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d13b      	bne.n	8001c9e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	4b3d      	ldr	r3, [pc, #244]	@ (8001d1c <HAL_RCC_OscConfig+0x65c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fa88 	bl	8001140 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c34:	f7ff fa84 	bl	8001140 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e063      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c46:	4b34      	ldr	r3, [pc, #208]	@ (8001d18 <HAL_RCC_OscConfig+0x658>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c52:	4b31      	ldr	r3, [pc, #196]	@ (8001d18 <HAL_RCC_OscConfig+0x658>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c62:	4319      	orrs	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	492b      	ldr	r1, [pc, #172]	@ (8001d18 <HAL_RCC_OscConfig+0x658>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c70:	4b2a      	ldr	r3, [pc, #168]	@ (8001d1c <HAL_RCC_OscConfig+0x65c>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff fa63 	bl	8001140 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff fa5f 	bl	8001140 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e03e      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c90:	4b21      	ldr	r3, [pc, #132]	@ (8001d18 <HAL_RCC_OscConfig+0x658>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x5be>
 8001c9c:	e036      	b.n	8001d0c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d1c <HAL_RCC_OscConfig+0x65c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fa4c 	bl	8001140 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff fa48 	bl	8001140 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e027      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cbe:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <HAL_RCC_OscConfig+0x658>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x5ec>
 8001cca:	e01f      	b.n	8001d0c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e01a      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <HAL_RCC_OscConfig+0x658>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d10d      	bne.n	8001d08 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d106      	bne.n	8001d08 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	42470060 	.word	0x42470060

08001d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e11a      	b.n	8001f6a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d34:	4b8f      	ldr	r3, [pc, #572]	@ (8001f74 <HAL_RCC_ClockConfig+0x254>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d919      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x34>
 8001d48:	4b8a      	ldr	r3, [pc, #552]	@ (8001f74 <HAL_RCC_ClockConfig+0x254>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a89      	ldr	r2, [pc, #548]	@ (8001f74 <HAL_RCC_ClockConfig+0x254>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b87      	ldr	r3, [pc, #540]	@ (8001f74 <HAL_RCC_ClockConfig+0x254>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 0201 	bic.w	r2, r3, #1
 8001d5c:	4985      	ldr	r1, [pc, #532]	@ (8001f74 <HAL_RCC_ClockConfig+0x254>)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d64:	4b83      	ldr	r3, [pc, #524]	@ (8001f74 <HAL_RCC_ClockConfig+0x254>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d001      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0f9      	b.n	8001f6a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d008      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d82:	4b7d      	ldr	r3, [pc, #500]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	497a      	ldr	r1, [pc, #488]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 808e 	beq.w	8001ebe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001daa:	4b73      	ldr	r3, [pc, #460]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d121      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e0d7      	b.n	8001f6a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d115      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0cb      	b.n	8001f6a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dda:	4b67      	ldr	r3, [pc, #412]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0bf      	b.n	8001f6a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dea:	4b63      	ldr	r3, [pc, #396]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e0b7      	b.n	8001f6a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfa:	4b5f      	ldr	r3, [pc, #380]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f023 0203 	bic.w	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	495c      	ldr	r1, [pc, #368]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e0c:	f7ff f998 	bl	8001140 <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d112      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7ff f990 	bl	8001140 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e09b      	b.n	8001f6a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e32:	4b51      	ldr	r3, [pc, #324]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d1ee      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xfc>
 8001e3e:	e03e      	b.n	8001ebe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d112      	bne.n	8001e6e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4a:	f7ff f979 	bl	8001140 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e084      	b.n	8001f6a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e60:	4b45      	ldr	r3, [pc, #276]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b0c      	cmp	r3, #12
 8001e6a:	d1ee      	bne.n	8001e4a <HAL_RCC_ClockConfig+0x12a>
 8001e6c:	e027      	b.n	8001ebe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d11d      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e78:	f7ff f962 	bl	8001140 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e06d      	b.n	8001f6a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d1ee      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x158>
 8001e9a:	e010      	b.n	8001ebe <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9c:	f7ff f950 	bl	8001140 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e05b      	b.n	8001f6a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001eb2:	4b31      	ldr	r3, [pc, #196]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ee      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8001f74 <HAL_RCC_ClockConfig+0x254>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d219      	bcs.n	8001f00 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d105      	bne.n	8001ede <HAL_RCC_ClockConfig+0x1be>
 8001ed2:	4b28      	ldr	r3, [pc, #160]	@ (8001f74 <HAL_RCC_ClockConfig+0x254>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a27      	ldr	r2, [pc, #156]	@ (8001f74 <HAL_RCC_ClockConfig+0x254>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b25      	ldr	r3, [pc, #148]	@ (8001f74 <HAL_RCC_ClockConfig+0x254>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 0201 	bic.w	r2, r3, #1
 8001ee6:	4923      	ldr	r1, [pc, #140]	@ (8001f74 <HAL_RCC_ClockConfig+0x254>)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <HAL_RCC_ClockConfig+0x254>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e034      	b.n	8001f6a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4917      	ldr	r1, [pc, #92]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f2a:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	490f      	ldr	r1, [pc, #60]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f3e:	f000 f823 	bl	8001f88 <HAL_RCC_GetSysClockFreq>
 8001f42:	4602      	mov	r2, r0
 8001f44:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <HAL_RCC_ClockConfig+0x258>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	490b      	ldr	r1, [pc, #44]	@ (8001f7c <HAL_RCC_ClockConfig+0x25c>)
 8001f50:	5ccb      	ldrb	r3, [r1, r3]
 8001f52:	fa22 f303 	lsr.w	r3, r2, r3
 8001f56:	4a0a      	ldr	r2, [pc, #40]	@ (8001f80 <HAL_RCC_ClockConfig+0x260>)
 8001f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <HAL_RCC_ClockConfig+0x264>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f8a2 	bl	80010a8 <HAL_InitTick>
 8001f64:	4603      	mov	r3, r0
 8001f66:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f68:	7afb      	ldrb	r3, [r7, #11]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023c00 	.word	0x40023c00
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	080049ac 	.word	0x080049ac
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f8c:	b092      	sub	sp, #72	@ 0x48
 8001f8e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f90:	4b79      	ldr	r3, [pc, #484]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b0c      	cmp	r3, #12
 8001f9e:	d00d      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x34>
 8001fa0:	2b0c      	cmp	r3, #12
 8001fa2:	f200 80d5 	bhi.w	8002150 <HAL_RCC_GetSysClockFreq+0x1c8>
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d002      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x28>
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d003      	beq.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x2e>
 8001fae:	e0cf      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fb0:	4b72      	ldr	r3, [pc, #456]	@ (800217c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001fb2:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001fb4:	e0da      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fb6:	4b72      	ldr	r3, [pc, #456]	@ (8002180 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001fb8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001fba:	e0d7      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fbe:	0c9b      	lsrs	r3, r3, #18
 8001fc0:	f003 020f 	and.w	r2, r3, #15
 8001fc4:	4b6f      	ldr	r3, [pc, #444]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001fc6:	5c9b      	ldrb	r3, [r3, r2]
 8001fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fcc:	0d9b      	lsrs	r3, r3, #22
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd6:	4b68      	ldr	r3, [pc, #416]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d05d      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4604      	mov	r4, r0
 8001fec:	460d      	mov	r5, r1
 8001fee:	4622      	mov	r2, r4
 8001ff0:	462b      	mov	r3, r5
 8001ff2:	f04f 0000 	mov.w	r0, #0
 8001ff6:	f04f 0100 	mov.w	r1, #0
 8001ffa:	0159      	lsls	r1, r3, #5
 8001ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002000:	0150      	lsls	r0, r2, #5
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4621      	mov	r1, r4
 8002008:	1a51      	subs	r1, r2, r1
 800200a:	6139      	str	r1, [r7, #16]
 800200c:	4629      	mov	r1, r5
 800200e:	eb63 0301 	sbc.w	r3, r3, r1
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002020:	4659      	mov	r1, fp
 8002022:	018b      	lsls	r3, r1, #6
 8002024:	4651      	mov	r1, sl
 8002026:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800202a:	4651      	mov	r1, sl
 800202c:	018a      	lsls	r2, r1, #6
 800202e:	46d4      	mov	ip, sl
 8002030:	ebb2 080c 	subs.w	r8, r2, ip
 8002034:	4659      	mov	r1, fp
 8002036:	eb63 0901 	sbc.w	r9, r3, r1
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800204a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800204e:	4690      	mov	r8, r2
 8002050:	4699      	mov	r9, r3
 8002052:	4623      	mov	r3, r4
 8002054:	eb18 0303 	adds.w	r3, r8, r3
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	462b      	mov	r3, r5
 800205c:	eb49 0303 	adc.w	r3, r9, r3
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800206e:	4629      	mov	r1, r5
 8002070:	024b      	lsls	r3, r1, #9
 8002072:	4620      	mov	r0, r4
 8002074:	4629      	mov	r1, r5
 8002076:	4604      	mov	r4, r0
 8002078:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800207c:	4601      	mov	r1, r0
 800207e:	024a      	lsls	r2, r1, #9
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002086:	2200      	movs	r2, #0
 8002088:	62bb      	str	r3, [r7, #40]	@ 0x28
 800208a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800208c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002090:	f7fe fa58 	bl	8000544 <__aeabi_uldivmod>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4613      	mov	r3, r2
 800209a:	647b      	str	r3, [r7, #68]	@ 0x44
 800209c:	e055      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800209e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a0:	2200      	movs	r2, #0
 80020a2:	623b      	str	r3, [r7, #32]
 80020a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80020a6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020aa:	4642      	mov	r2, r8
 80020ac:	464b      	mov	r3, r9
 80020ae:	f04f 0000 	mov.w	r0, #0
 80020b2:	f04f 0100 	mov.w	r1, #0
 80020b6:	0159      	lsls	r1, r3, #5
 80020b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020bc:	0150      	lsls	r0, r2, #5
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	46c4      	mov	ip, r8
 80020c4:	ebb2 0a0c 	subs.w	sl, r2, ip
 80020c8:	4640      	mov	r0, r8
 80020ca:	4649      	mov	r1, r9
 80020cc:	468c      	mov	ip, r1
 80020ce:	eb63 0b0c 	sbc.w	fp, r3, ip
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020de:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020e2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020e6:	ebb2 040a 	subs.w	r4, r2, sl
 80020ea:	eb63 050b 	sbc.w	r5, r3, fp
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	00eb      	lsls	r3, r5, #3
 80020f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020fc:	00e2      	lsls	r2, r4, #3
 80020fe:	4614      	mov	r4, r2
 8002100:	461d      	mov	r5, r3
 8002102:	4603      	mov	r3, r0
 8002104:	18e3      	adds	r3, r4, r3
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	460b      	mov	r3, r1
 800210a:	eb45 0303 	adc.w	r3, r5, r3
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	e9d7 4500 	ldrd	r4, r5, [r7]
 800211c:	4629      	mov	r1, r5
 800211e:	028b      	lsls	r3, r1, #10
 8002120:	4620      	mov	r0, r4
 8002122:	4629      	mov	r1, r5
 8002124:	4604      	mov	r4, r0
 8002126:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800212a:	4601      	mov	r1, r0
 800212c:	028a      	lsls	r2, r1, #10
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002134:	2200      	movs	r2, #0
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	61fa      	str	r2, [r7, #28]
 800213a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800213e:	f7fe fa01 	bl	8000544 <__aeabi_uldivmod>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4613      	mov	r3, r2
 8002148:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 800214a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800214c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800214e:	e00d      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	0b5b      	lsrs	r3, r3, #13
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800215c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800215e:	3301      	adds	r3, #1
 8002160:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800216a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800216c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800216e:	4618      	mov	r0, r3
 8002170:	3748      	adds	r7, #72	@ 0x48
 8002172:	46bd      	mov	sp, r7
 8002174:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002178:	40023800 	.word	0x40023800
 800217c:	00f42400 	.word	0x00f42400
 8002180:	007a1200 	.word	0x007a1200
 8002184:	080049a0 	.word	0x080049a0

08002188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800218c:	4b02      	ldr	r3, [pc, #8]	@ (8002198 <HAL_RCC_GetHCLKFreq+0x10>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	20000000 	.word	0x20000000

0800219c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021a0:	f7ff fff2 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4903      	ldr	r1, [pc, #12]	@ (80021c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40023800 	.word	0x40023800
 80021c0:	080049bc 	.word	0x080049bc

080021c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021c8:	f7ff ffde 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	0adb      	lsrs	r3, r3, #11
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4903      	ldr	r1, [pc, #12]	@ (80021e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40023800 	.word	0x40023800
 80021e8:	080049bc 	.word	0x080049bc

080021ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80021f8:	4b29      	ldr	r3, [pc, #164]	@ (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d12c      	bne.n	800225e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002204:	4b26      	ldr	r3, [pc, #152]	@ (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002210:	4b24      	ldr	r3, [pc, #144]	@ (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e016      	b.n	800224a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221c:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800221e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002220:	4a1f      	ldr	r2, [pc, #124]	@ (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002226:	6253      	str	r3, [r2, #36]	@ 0x24
 8002228:	4b1d      	ldr	r3, [pc, #116]	@ (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800222a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002234:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800223c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800223e:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	4a17      	ldr	r2, [pc, #92]	@ (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002244:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002248:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8002250:	d105      	bne.n	800225e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002258:	d101      	bne.n	800225e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800225a:	2301      	movs	r3, #1
 800225c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d105      	bne.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002264:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0f      	ldr	r2, [pc, #60]	@ (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4b0d      	ldr	r3, [pc, #52]	@ (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 0201 	bic.w	r2, r3, #1
 8002278:	490b      	ldr	r1, [pc, #44]	@ (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002280:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	429a      	cmp	r2, r3
 800228c:	d001      	beq.n	8002292 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40007000 	.word	0x40007000
 80022a8:	40023c00 	.word	0x40023c00

080022ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e031      	b.n	8002322 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fde6 	bl	8000ea4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3304      	adds	r3, #4
 80022e8:	4619      	mov	r1, r3
 80022ea:	4610      	mov	r0, r2
 80022ec:	f000 fb66 	bl	80029bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <HAL_TIM_PWM_Start+0x24>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	bf14      	ite	ne
 8002348:	2301      	movne	r3, #1
 800234a:	2300      	moveq	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	e022      	b.n	8002396 <HAL_TIM_PWM_Start+0x6a>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b04      	cmp	r3, #4
 8002354:	d109      	bne.n	800236a <HAL_TIM_PWM_Start+0x3e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	bf14      	ite	ne
 8002362:	2301      	movne	r3, #1
 8002364:	2300      	moveq	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	e015      	b.n	8002396 <HAL_TIM_PWM_Start+0x6a>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b08      	cmp	r3, #8
 800236e:	d109      	bne.n	8002384 <HAL_TIM_PWM_Start+0x58>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	bf14      	ite	ne
 800237c:	2301      	movne	r3, #1
 800237e:	2300      	moveq	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	e008      	b.n	8002396 <HAL_TIM_PWM_Start+0x6a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b01      	cmp	r3, #1
 800238e:	bf14      	ite	ne
 8002390:	2301      	movne	r3, #1
 8002392:	2300      	moveq	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e051      	b.n	8002442 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d104      	bne.n	80023ae <HAL_TIM_PWM_Start+0x82>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80023ac:	e013      	b.n	80023d6 <HAL_TIM_PWM_Start+0xaa>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d104      	bne.n	80023be <HAL_TIM_PWM_Start+0x92>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80023bc:	e00b      	b.n	80023d6 <HAL_TIM_PWM_Start+0xaa>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d104      	bne.n	80023ce <HAL_TIM_PWM_Start+0xa2>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80023cc:	e003      	b.n	80023d6 <HAL_TIM_PWM_Start+0xaa>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2201      	movs	r2, #1
 80023dc:	6839      	ldr	r1, [r7, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fd6b 	bl	8002eba <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023ec:	d00e      	beq.n	800240c <HAL_TIM_PWM_Start+0xe0>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a16      	ldr	r2, [pc, #88]	@ (800244c <HAL_TIM_PWM_Start+0x120>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_TIM_PWM_Start+0xe0>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a14      	ldr	r2, [pc, #80]	@ (8002450 <HAL_TIM_PWM_Start+0x124>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d004      	beq.n	800240c <HAL_TIM_PWM_Start+0xe0>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a13      	ldr	r2, [pc, #76]	@ (8002454 <HAL_TIM_PWM_Start+0x128>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d111      	bne.n	8002430 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b06      	cmp	r3, #6
 800241c:	d010      	beq.n	8002440 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0201 	orr.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800242e:	e007      	b.n	8002440 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40000400 	.word	0x40000400
 8002450:	40000800 	.word	0x40000800
 8002454:	40010800 	.word	0x40010800

08002458 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e031      	b.n	80024ce <HAL_TIM_IC_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe fcc6 	bl	8000e10 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3304      	adds	r3, #4
 8002494:	4619      	mov	r1, r3
 8002496:	4610      	mov	r0, r2
 8002498:	f000 fa90 	bl	80029bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d104      	bne.n	80024f6 <HAL_TIM_IC_Start_IT+0x1e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	e013      	b.n	800251e <HAL_TIM_IC_Start_IT+0x46>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d104      	bne.n	8002506 <HAL_TIM_IC_Start_IT+0x2e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8002502:	b2db      	uxtb	r3, r3
 8002504:	e00b      	b.n	800251e <HAL_TIM_IC_Start_IT+0x46>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b08      	cmp	r3, #8
 800250a:	d104      	bne.n	8002516 <HAL_TIM_IC_Start_IT+0x3e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002512:	b2db      	uxtb	r3, r3
 8002514:	e003      	b.n	800251e <HAL_TIM_IC_Start_IT+0x46>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002520:	7bbb      	ldrb	r3, [r7, #14]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d001      	beq.n	800252a <HAL_TIM_IC_Start_IT+0x52>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e09c      	b.n	8002664 <HAL_TIM_IC_Start_IT+0x18c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d104      	bne.n	800253a <HAL_TIM_IC_Start_IT+0x62>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002538:	e013      	b.n	8002562 <HAL_TIM_IC_Start_IT+0x8a>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b04      	cmp	r3, #4
 800253e:	d104      	bne.n	800254a <HAL_TIM_IC_Start_IT+0x72>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8002548:	e00b      	b.n	8002562 <HAL_TIM_IC_Start_IT+0x8a>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b08      	cmp	r3, #8
 800254e:	d104      	bne.n	800255a <HAL_TIM_IC_Start_IT+0x82>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002558:	e003      	b.n	8002562 <HAL_TIM_IC_Start_IT+0x8a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2202      	movs	r2, #2
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (Channel)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d841      	bhi.n	80025ec <HAL_TIM_IC_Start_IT+0x114>
 8002568:	a201      	add	r2, pc, #4	@ (adr r2, 8002570 <HAL_TIM_IC_Start_IT+0x98>)
 800256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256e:	bf00      	nop
 8002570:	080025a5 	.word	0x080025a5
 8002574:	080025ed 	.word	0x080025ed
 8002578:	080025ed 	.word	0x080025ed
 800257c:	080025ed 	.word	0x080025ed
 8002580:	080025b7 	.word	0x080025b7
 8002584:	080025ed 	.word	0x080025ed
 8002588:	080025ed 	.word	0x080025ed
 800258c:	080025ed 	.word	0x080025ed
 8002590:	080025c9 	.word	0x080025c9
 8002594:	080025ed 	.word	0x080025ed
 8002598:	080025ed 	.word	0x080025ed
 800259c:	080025ed 	.word	0x080025ed
 80025a0:	080025db 	.word	0x080025db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0202 	orr.w	r2, r2, #2
 80025b2:	60da      	str	r2, [r3, #12]
      break;
 80025b4:	e01d      	b.n	80025f2 <HAL_TIM_IC_Start_IT+0x11a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 0204 	orr.w	r2, r2, #4
 80025c4:	60da      	str	r2, [r3, #12]
      break;
 80025c6:	e014      	b.n	80025f2 <HAL_TIM_IC_Start_IT+0x11a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0208 	orr.w	r2, r2, #8
 80025d6:	60da      	str	r2, [r3, #12]
      break;
 80025d8:	e00b      	b.n	80025f2 <HAL_TIM_IC_Start_IT+0x11a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0210 	orr.w	r2, r2, #16
 80025e8:	60da      	str	r2, [r3, #12]
      break;
 80025ea:	e002      	b.n	80025f2 <HAL_TIM_IC_Start_IT+0x11a>
    }

    default:
      status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
      break;
 80025f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d134      	bne.n	8002662 <HAL_TIM_IC_Start_IT+0x18a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2201      	movs	r2, #1
 80025fe:	6839      	ldr	r1, [r7, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f000 fc5a 	bl	8002eba <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800260e:	d00e      	beq.n	800262e <HAL_TIM_IC_Start_IT+0x156>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a15      	ldr	r2, [pc, #84]	@ (800266c <HAL_TIM_IC_Start_IT+0x194>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d009      	beq.n	800262e <HAL_TIM_IC_Start_IT+0x156>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a14      	ldr	r2, [pc, #80]	@ (8002670 <HAL_TIM_IC_Start_IT+0x198>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d004      	beq.n	800262e <HAL_TIM_IC_Start_IT+0x156>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a12      	ldr	r2, [pc, #72]	@ (8002674 <HAL_TIM_IC_Start_IT+0x19c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d111      	bne.n	8002652 <HAL_TIM_IC_Start_IT+0x17a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b06      	cmp	r3, #6
 800263e:	d010      	beq.n	8002662 <HAL_TIM_IC_Start_IT+0x18a>
      {
        __HAL_TIM_ENABLE(htim);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002650:	e007      	b.n	8002662 <HAL_TIM_IC_Start_IT+0x18a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002662:	7bfb      	ldrb	r3, [r7, #15]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40000400 	.word	0x40000400
 8002670:	40000800 	.word	0x40000800
 8002674:	40010800 	.word	0x40010800

08002678 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002692:	2302      	movs	r3, #2
 8002694:	e088      	b.n	80027a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if (Channel == TIM_CHANNEL_1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d11b      	bne.n	80026dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80026b4:	f000 faee 	bl	8002c94 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 020c 	bic.w	r2, r2, #12
 80026c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6999      	ldr	r1, [r3, #24]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	619a      	str	r2, [r3, #24]
 80026da:	e060      	b.n	800279e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d11c      	bne.n	800271c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80026f2:	f000 fb2f 	bl	8002d54 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002704:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6999      	ldr	r1, [r3, #24]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	021a      	lsls	r2, r3, #8
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	619a      	str	r2, [r3, #24]
 800271a:	e040      	b.n	800279e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b08      	cmp	r3, #8
 8002720:	d11b      	bne.n	800275a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002732:	f000 fb4b 	bl	8002dcc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 020c 	bic.w	r2, r2, #12
 8002744:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69d9      	ldr	r1, [r3, #28]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	61da      	str	r2, [r3, #28]
 8002758:	e021      	b.n	800279e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b0c      	cmp	r3, #12
 800275e:	d11c      	bne.n	800279a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002770:	f000 fb67 	bl	8002e42 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002782:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69d9      	ldr	r1, [r3, #28]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	021a      	lsls	r2, r3, #8
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	61da      	str	r2, [r3, #28]
 8002798:	e001      	b.n	800279e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0ae      	b.n	800292c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	f200 809f 	bhi.w	800291c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027de:	a201      	add	r2, pc, #4	@ (adr r2, 80027e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e4:	08002819 	.word	0x08002819
 80027e8:	0800291d 	.word	0x0800291d
 80027ec:	0800291d 	.word	0x0800291d
 80027f0:	0800291d 	.word	0x0800291d
 80027f4:	08002859 	.word	0x08002859
 80027f8:	0800291d 	.word	0x0800291d
 80027fc:	0800291d 	.word	0x0800291d
 8002800:	0800291d 	.word	0x0800291d
 8002804:	0800289b 	.word	0x0800289b
 8002808:	0800291d 	.word	0x0800291d
 800280c:	0800291d 	.word	0x0800291d
 8002810:	0800291d 	.word	0x0800291d
 8002814:	080028db 	.word	0x080028db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f942 	bl	8002aa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0208 	orr.w	r2, r2, #8
 8002832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0204 	bic.w	r2, r2, #4
 8002842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6999      	ldr	r1, [r3, #24]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	619a      	str	r2, [r3, #24]
      break;
 8002856:	e064      	b.n	8002922 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f95e 	bl	8002b20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6999      	ldr	r1, [r3, #24]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	021a      	lsls	r2, r3, #8
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	619a      	str	r2, [r3, #24]
      break;
 8002898:	e043      	b.n	8002922 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 f97b 	bl	8002b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0208 	orr.w	r2, r2, #8
 80028b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69da      	ldr	r2, [r3, #28]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0204 	bic.w	r2, r2, #4
 80028c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69d9      	ldr	r1, [r3, #28]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	61da      	str	r2, [r3, #28]
      break;
 80028d8:	e023      	b.n	8002922 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 f998 	bl	8002c16 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	69da      	ldr	r2, [r3, #28]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69d9      	ldr	r1, [r3, #28]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	021a      	lsls	r2, r3, #8
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	61da      	str	r2, [r3, #28]
      break;
 800291a:	e002      	b.n	8002922 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	75fb      	strb	r3, [r7, #23]
      break;
 8002920:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800292a:	7dfb      	ldrb	r3, [r7, #23]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b0c      	cmp	r3, #12
 8002946:	d831      	bhi.n	80029ac <HAL_TIM_ReadCapturedValue+0x78>
 8002948:	a201      	add	r2, pc, #4	@ (adr r2, 8002950 <HAL_TIM_ReadCapturedValue+0x1c>)
 800294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294e:	bf00      	nop
 8002950:	08002985 	.word	0x08002985
 8002954:	080029ad 	.word	0x080029ad
 8002958:	080029ad 	.word	0x080029ad
 800295c:	080029ad 	.word	0x080029ad
 8002960:	0800298f 	.word	0x0800298f
 8002964:	080029ad 	.word	0x080029ad
 8002968:	080029ad 	.word	0x080029ad
 800296c:	080029ad 	.word	0x080029ad
 8002970:	08002999 	.word	0x08002999
 8002974:	080029ad 	.word	0x080029ad
 8002978:	080029ad 	.word	0x080029ad
 800297c:	080029ad 	.word	0x080029ad
 8002980:	080029a3 	.word	0x080029a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800298a:	60fb      	str	r3, [r7, #12]

      break;
 800298c:	e00f      	b.n	80029ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002994:	60fb      	str	r3, [r7, #12]

      break;
 8002996:	e00a      	b.n	80029ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299e:	60fb      	str	r3, [r7, #12]

      break;
 80029a0:	e005      	b.n	80029ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	60fb      	str	r3, [r7, #12]

      break;
 80029aa:	e000      	b.n	80029ae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80029ac:	bf00      	nop
  }

  return tmpreg;
 80029ae:	68fb      	ldr	r3, [r7, #12]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop

080029bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d2:	d00f      	beq.n	80029f4 <TIM_Base_SetConfig+0x38>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a2e      	ldr	r2, [pc, #184]	@ (8002a90 <TIM_Base_SetConfig+0xd4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00b      	beq.n	80029f4 <TIM_Base_SetConfig+0x38>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a2d      	ldr	r2, [pc, #180]	@ (8002a94 <TIM_Base_SetConfig+0xd8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d007      	beq.n	80029f4 <TIM_Base_SetConfig+0x38>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a98 <TIM_Base_SetConfig+0xdc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d003      	beq.n	80029f4 <TIM_Base_SetConfig+0x38>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a2b      	ldr	r2, [pc, #172]	@ (8002a9c <TIM_Base_SetConfig+0xe0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d108      	bne.n	8002a06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a0c:	d017      	beq.n	8002a3e <TIM_Base_SetConfig+0x82>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a1f      	ldr	r2, [pc, #124]	@ (8002a90 <TIM_Base_SetConfig+0xd4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <TIM_Base_SetConfig+0x82>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a1e      	ldr	r2, [pc, #120]	@ (8002a94 <TIM_Base_SetConfig+0xd8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00f      	beq.n	8002a3e <TIM_Base_SetConfig+0x82>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a1d      	ldr	r2, [pc, #116]	@ (8002a98 <TIM_Base_SetConfig+0xdc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00b      	beq.n	8002a3e <TIM_Base_SetConfig+0x82>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a1c      	ldr	r2, [pc, #112]	@ (8002a9c <TIM_Base_SetConfig+0xe0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <TIM_Base_SetConfig+0x82>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a1b      	ldr	r2, [pc, #108]	@ (8002aa0 <TIM_Base_SetConfig+0xe4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d003      	beq.n	8002a3e <TIM_Base_SetConfig+0x82>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa4 <TIM_Base_SetConfig+0xe8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d108      	bne.n	8002a50 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f043 0204 	orr.w	r2, r3, #4
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	601a      	str	r2, [r3, #0]
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	40000400 	.word	0x40000400
 8002a94:	40000800 	.word	0x40000800
 8002a98:	40000c00 	.word	0x40000c00
 8002a9c:	40010800 	.word	0x40010800
 8002aa0:	40010c00 	.word	0x40010c00
 8002aa4:	40011000 	.word	0x40011000

08002aa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f023 0201 	bic.w	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0303 	bic.w	r3, r3, #3
 8002ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f023 0302 	bic.w	r3, r3, #2
 8002af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	621a      	str	r2, [r3, #32]
}
 8002b16:	bf00      	nop
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f023 0210 	bic.w	r2, r3, #16
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f023 0320 	bic.w	r3, r3, #32
 8002b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	621a      	str	r2, [r3, #32]
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0303 	bic.w	r3, r3, #3
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	621a      	str	r2, [r3, #32]
}
 8002c0c:	bf00      	nop
 8002c0e:	371c      	adds	r7, #28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b087      	sub	sp, #28
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	031b      	lsls	r3, r3, #12
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	621a      	str	r2, [r3, #32]
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
	...

08002c94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	f023 0201 	bic.w	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc0:	d00f      	beq.n	8002ce2 <TIM_TI1_SetConfig+0x4e>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d44 <TIM_TI1_SetConfig+0xb0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00b      	beq.n	8002ce2 <TIM_TI1_SetConfig+0x4e>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8002d48 <TIM_TI1_SetConfig+0xb4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d007      	beq.n	8002ce2 <TIM_TI1_SetConfig+0x4e>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d4c <TIM_TI1_SetConfig+0xb8>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d003      	beq.n	8002ce2 <TIM_TI1_SetConfig+0x4e>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8002d50 <TIM_TI1_SetConfig+0xbc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d101      	bne.n	8002ce6 <TIM_TI1_SetConfig+0x52>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <TIM_TI1_SetConfig+0x54>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f023 0303 	bic.w	r3, r3, #3
 8002cf2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	e003      	b.n	8002d06 <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f023 030a 	bic.w	r3, r3, #10
 8002d20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f003 030a 	and.w	r3, r3, #10
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	621a      	str	r2, [r3, #32]
}
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	40000400 	.word	0x40000400
 8002d48:	40000800 	.word	0x40000800
 8002d4c:	40000c00 	.word	0x40000c00
 8002d50:	40010800 	.word	0x40010800

08002d54 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f023 0210 	bic.w	r2, r3, #16
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	031b      	lsls	r3, r3, #12
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002da6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	621a      	str	r2, [r3, #32]
}
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f023 0303 	bic.w	r3, r3, #3
 8002df8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e08:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	621a      	str	r2, [r3, #32]
}
 8002e38:	bf00      	nop
 8002e3a:	371c      	adds	r7, #28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr

08002e42 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b087      	sub	sp, #28
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e6e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e80:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	031b      	lsls	r3, r3, #12
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002e94:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	031b      	lsls	r3, r3, #12
 8002e9a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	621a      	str	r2, [r3, #32]
}
 8002eb0:	bf00      	nop
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b087      	sub	sp, #28
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	2201      	movs	r2, #1
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a1a      	ldr	r2, [r3, #32]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	401a      	ands	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a1a      	ldr	r2, [r3, #32]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	621a      	str	r2, [r3, #32]
}
 8002ef8:	bf00      	nop
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e046      	b.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f5e:	d00e      	beq.n	8002f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a13      	ldr	r2, [pc, #76]	@ (8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d009      	beq.n	8002f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a12      	ldr	r2, [pc, #72]	@ (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d004      	beq.n	8002f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a10      	ldr	r2, [pc, #64]	@ (8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10c      	bne.n	8002f98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40000800 	.word	0x40000800
 8002fbc:	40010800 	.word	0x40010800

08002fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e042      	b.n	8003058 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd ffdc 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2224      	movs	r2, #36	@ 0x24
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f82b 	bl	8003060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4313      	orrs	r3, r2
 8003094:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80030a0:	f023 030c 	bic.w	r3, r3, #12
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	430b      	orrs	r3, r1
 80030ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a55      	ldr	r2, [pc, #340]	@ (8003220 <UART_SetConfig+0x1c0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d103      	bne.n	80030d6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030ce:	f7ff f879 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	e002      	b.n	80030dc <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030d6:	f7ff f861 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 80030da:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030e4:	d14c      	bne.n	8003180 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	009a      	lsls	r2, r3, #2
 80030f0:	441a      	add	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	4a49      	ldr	r2, [pc, #292]	@ (8003224 <UART_SetConfig+0x1c4>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	0119      	lsls	r1, r3, #4
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	009a      	lsls	r2, r3, #2
 8003110:	441a      	add	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fbb2 f2f3 	udiv	r2, r2, r3
 800311c:	4b41      	ldr	r3, [pc, #260]	@ (8003224 <UART_SetConfig+0x1c4>)
 800311e:	fba3 0302 	umull	r0, r3, r3, r2
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2064      	movs	r0, #100	@ 0x64
 8003126:	fb00 f303 	mul.w	r3, r0, r3
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	3332      	adds	r3, #50	@ 0x32
 8003130:	4a3c      	ldr	r2, [pc, #240]	@ (8003224 <UART_SetConfig+0x1c4>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800313e:	4419      	add	r1, r3
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	009a      	lsls	r2, r3, #2
 800314a:	441a      	add	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fbb2 f2f3 	udiv	r2, r2, r3
 8003156:	4b33      	ldr	r3, [pc, #204]	@ (8003224 <UART_SetConfig+0x1c4>)
 8003158:	fba3 0302 	umull	r0, r3, r3, r2
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	2064      	movs	r0, #100	@ 0x64
 8003160:	fb00 f303 	mul.w	r3, r0, r3
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	3332      	adds	r3, #50	@ 0x32
 800316a:	4a2e      	ldr	r2, [pc, #184]	@ (8003224 <UART_SetConfig+0x1c4>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	f003 0207 	and.w	r2, r3, #7
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	440a      	add	r2, r1
 800317c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800317e:	e04a      	b.n	8003216 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	009a      	lsls	r2, r3, #2
 800318a:	441a      	add	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	fbb2 f3f3 	udiv	r3, r2, r3
 8003196:	4a23      	ldr	r2, [pc, #140]	@ (8003224 <UART_SetConfig+0x1c4>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	0119      	lsls	r1, r3, #4
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	009a      	lsls	r2, r3, #2
 80031aa:	441a      	add	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <UART_SetConfig+0x1c4>)
 80031b8:	fba3 0302 	umull	r0, r3, r3, r2
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	2064      	movs	r0, #100	@ 0x64
 80031c0:	fb00 f303 	mul.w	r3, r0, r3
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	3332      	adds	r3, #50	@ 0x32
 80031ca:	4a16      	ldr	r2, [pc, #88]	@ (8003224 <UART_SetConfig+0x1c4>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031d6:	4419      	add	r1, r3
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	009a      	lsls	r2, r3, #2
 80031e2:	441a      	add	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003224 <UART_SetConfig+0x1c4>)
 80031f0:	fba3 0302 	umull	r0, r3, r3, r2
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	2064      	movs	r0, #100	@ 0x64
 80031f8:	fb00 f303 	mul.w	r3, r0, r3
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	3332      	adds	r3, #50	@ 0x32
 8003202:	4a08      	ldr	r2, [pc, #32]	@ (8003224 <UART_SetConfig+0x1c4>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	f003 020f 	and.w	r2, r3, #15
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	440a      	add	r2, r1
 8003214:	609a      	str	r2, [r3, #8]
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40013800 	.word	0x40013800
 8003224:	51eb851f 	.word	0x51eb851f

08003228 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800322c:	f000 fb90 	bl	8003950 <vTaskStartScheduler>
  
  return osOK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	bd80      	pop	{r7, pc}

08003236 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f103 0208 	add.w	r2, r3, #8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800324e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f103 0208 	add.w	r2, r3, #8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f103 0208 	add.w	r2, r3, #8
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	601a      	str	r2, [r3, #0]
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6892      	ldr	r2, [r2, #8]
 80032e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6852      	ldr	r2, [r2, #4]
 80032f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d103      	bne.n	8003306 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	1e5a      	subs	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10b      	bne.n	8003350 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800334a:	bf00      	nop
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003350:	f000 fffc 	bl	800434c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800335c:	68f9      	ldr	r1, [r7, #12]
 800335e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	441a      	add	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003380:	3b01      	subs	r3, #1
 8003382:	68f9      	ldr	r1, [r7, #12]
 8003384:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003386:	fb01 f303 	mul.w	r3, r1, r3
 800338a:	441a      	add	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	22ff      	movs	r2, #255	@ 0xff
 8003394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	22ff      	movs	r2, #255	@ 0xff
 800339c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d114      	bne.n	80033d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01a      	beq.n	80033e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	3310      	adds	r3, #16
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fcf4 	bl	8003da0 <xTaskRemoveFromEventList>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d012      	beq.n	80033e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80033be:	4b0d      	ldr	r3, [pc, #52]	@ (80033f4 <xQueueGenericReset+0xd0>)
 80033c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	e009      	b.n	80033e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3310      	adds	r3, #16
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff2e 	bl	8003236 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	3324      	adds	r3, #36	@ 0x24
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff ff29 	bl	8003236 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80033e4:	f000 ffe2 	bl	80043ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80033e8:	2301      	movs	r3, #1
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	e000ed04 	.word	0xe000ed04

080033f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	@ 0x28
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	4613      	mov	r3, r2
 8003404:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10b      	bne.n	8003424 <xQueueGenericCreate+0x2c>
	__asm volatile
 800340c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	613b      	str	r3, [r7, #16]
}
 800341e:	bf00      	nop
 8003420:	bf00      	nop
 8003422:	e7fd      	b.n	8003420 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	e004      	b.n	800343a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	fb02 f303 	mul.w	r3, r2, r3
 8003438:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3348      	adds	r3, #72	@ 0x48
 800343e:	4618      	mov	r0, r3
 8003440:	f001 f886 	bl	8004550 <pvPortMalloc>
 8003444:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00f      	beq.n	800346c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	3348      	adds	r3, #72	@ 0x48
 8003450:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800345a:	79fa      	ldrb	r2, [r7, #7]
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f805 	bl	8003476 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800346c:	69bb      	ldr	r3, [r7, #24]
	}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d103      	bne.n	8003492 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e002      	b.n	8003498 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80034a4:	2101      	movs	r1, #1
 80034a6:	69b8      	ldr	r0, [r7, #24]
 80034a8:	f7ff ff3c 	bl	8003324 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80034ac:	bf00      	nop
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08e      	sub	sp, #56	@ 0x38
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80034c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10b      	bne.n	80034e4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80034de:	bf00      	nop
 80034e0:	bf00      	nop
 80034e2:	e7fd      	b.n	80034e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d103      	bne.n	80034f2 <xQueueGenericSendFromISR+0x3e>
 80034ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <xQueueGenericSendFromISR+0x42>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <xQueueGenericSendFromISR+0x44>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10b      	bne.n	8003514 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	623b      	str	r3, [r7, #32]
}
 800350e:	bf00      	nop
 8003510:	bf00      	nop
 8003512:	e7fd      	b.n	8003510 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d103      	bne.n	8003522 <xQueueGenericSendFromISR+0x6e>
 800351a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <xQueueGenericSendFromISR+0x72>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <xQueueGenericSendFromISR+0x74>
 8003526:	2300      	movs	r3, #0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	61fb      	str	r3, [r7, #28]
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003544:	f000 ffc4 	bl	80044d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003548:	f3ef 8211 	mrs	r2, BASEPRI
 800354c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	61ba      	str	r2, [r7, #24]
 800355e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003560:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003562:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800356c:	429a      	cmp	r2, r3
 800356e:	d302      	bcc.n	8003576 <xQueueGenericSendFromISR+0xc2>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d12c      	bne.n	80035d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003578:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800357c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003586:	f000 f830 	bl	80035ea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800358a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003592:	d112      	bne.n	80035ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	2b00      	cmp	r3, #0
 800359a:	d016      	beq.n	80035ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359e:	3324      	adds	r3, #36	@ 0x24
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fbfd 	bl	8003da0 <xTaskRemoveFromEventList>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00e      	beq.n	80035ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00b      	beq.n	80035ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	e007      	b.n	80035ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80035ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80035be:	3301      	adds	r3, #1
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	b25a      	sxtb	r2, r3
 80035c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80035ca:	2301      	movs	r3, #1
 80035cc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80035ce:	e001      	b.n	80035d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80035d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80035de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3738      	adds	r7, #56	@ 0x38
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10d      	bne.n	8003624 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d14d      	bne.n	80036ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fd1f 	bl	8004058 <xTaskPriorityDisinherit>
 800361a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	e043      	b.n	80036ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d119      	bne.n	800365e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6898      	ldr	r0, [r3, #8]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	461a      	mov	r2, r3
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	f001 f995 	bl	8004964 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	441a      	add	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	429a      	cmp	r2, r3
 8003652:	d32b      	bcc.n	80036ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	e026      	b.n	80036ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	68d8      	ldr	r0, [r3, #12]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	461a      	mov	r2, r3
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	f001 f97b 	bl	8004964 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	425b      	negs	r3, r3
 8003678:	441a      	add	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d207      	bcs.n	800369a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	425b      	negs	r3, r3
 8003694:	441a      	add	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d105      	bne.n	80036ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80036b4:	697b      	ldr	r3, [r7, #20]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b08e      	sub	sp, #56	@ 0x38
 80036c2:	af04      	add	r7, sp, #16
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10b      	bne.n	80036ea <xTaskCreateStatic+0x2c>
	__asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	623b      	str	r3, [r7, #32]
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop
 80036e8:	e7fd      	b.n	80036e6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <xTaskCreateStatic+0x4a>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	61fb      	str	r3, [r7, #28]
}
 8003702:	bf00      	nop
 8003704:	bf00      	nop
 8003706:	e7fd      	b.n	8003704 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003708:	2354      	movs	r3, #84	@ 0x54
 800370a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b54      	cmp	r3, #84	@ 0x54
 8003710:	d00b      	beq.n	800372a <xTaskCreateStatic+0x6c>
	__asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	61bb      	str	r3, [r7, #24]
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	e7fd      	b.n	8003726 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800372a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01e      	beq.n	800376e <xTaskCreateStatic+0xb0>
 8003730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01b      	beq.n	800376e <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800373e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003742:	2202      	movs	r2, #2
 8003744:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003748:	2300      	movs	r3, #0
 800374a:	9303      	str	r3, [sp, #12]
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374e:	9302      	str	r3, [sp, #8]
 8003750:	f107 0314 	add.w	r3, r7, #20
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f80b 	bl	800377c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003766:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003768:	f000 f888 	bl	800387c <prvAddNewTaskToReadyList>
 800376c:	e001      	b.n	8003772 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003772:	697b      	ldr	r3, [r7, #20]
	}
 8003774:	4618      	mov	r0, r3
 8003776:	3728      	adds	r7, #40	@ 0x28
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800378a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003794:	3b01      	subs	r3, #1
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f023 0307 	bic.w	r3, r3, #7
 80037a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	617b      	str	r3, [r7, #20]
}
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	e7fd      	b.n	80037c2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	e012      	b.n	80037f2 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	7819      	ldrb	r1, [r3, #0]
 80037d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	4413      	add	r3, r2
 80037da:	3334      	adds	r3, #52	@ 0x34
 80037dc:	460a      	mov	r2, r1
 80037de:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d006      	beq.n	80037fa <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	3301      	adds	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	2b0f      	cmp	r3, #15
 80037f6:	d9e9      	bls.n	80037cc <prvInitialiseNewTask+0x50>
 80037f8:	e000      	b.n	80037fc <prvInitialiseNewTask+0x80>
		{
			break;
 80037fa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003806:	2b17      	cmp	r3, #23
 8003808:	d901      	bls.n	800380e <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800380a:	2317      	movs	r3, #23
 800380c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800380e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003810:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003812:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003818:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800381a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381c:	2200      	movs	r2, #0
 800381e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003822:	3304      	adds	r3, #4
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fd25 	bl	8003274 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800382a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382c:	3318      	adds	r3, #24
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff fd20 	bl	8003274 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003838:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800383a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383c:	f1c3 0218 	rsb	r2, r3, #24
 8003840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003842:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003848:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800384a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384c:	2200      	movs	r2, #0
 800384e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	68f9      	ldr	r1, [r7, #12]
 800385c:	69b8      	ldr	r0, [r7, #24]
 800385e:	f000 fc83 	bl	8004168 <pxPortInitialiseStack>
 8003862:	4602      	mov	r2, r0
 8003864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003866:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800386e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003872:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003874:	bf00      	nop
 8003876:	3720      	adds	r7, #32
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003884:	f000 fd62 	bl	800434c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003888:	4b2a      	ldr	r3, [pc, #168]	@ (8003934 <prvAddNewTaskToReadyList+0xb8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3301      	adds	r3, #1
 800388e:	4a29      	ldr	r2, [pc, #164]	@ (8003934 <prvAddNewTaskToReadyList+0xb8>)
 8003890:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003892:	4b29      	ldr	r3, [pc, #164]	@ (8003938 <prvAddNewTaskToReadyList+0xbc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800389a:	4a27      	ldr	r2, [pc, #156]	@ (8003938 <prvAddNewTaskToReadyList+0xbc>)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038a0:	4b24      	ldr	r3, [pc, #144]	@ (8003934 <prvAddNewTaskToReadyList+0xb8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d110      	bne.n	80038ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038a8:	f000 faf6 	bl	8003e98 <prvInitialiseTaskLists>
 80038ac:	e00d      	b.n	80038ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038ae:	4b23      	ldr	r3, [pc, #140]	@ (800393c <prvAddNewTaskToReadyList+0xc0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038b6:	4b20      	ldr	r3, [pc, #128]	@ (8003938 <prvAddNewTaskToReadyList+0xbc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d802      	bhi.n	80038ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003938 <prvAddNewTaskToReadyList+0xbc>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003940 <prvAddNewTaskToReadyList+0xc4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3301      	adds	r3, #1
 80038d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003940 <prvAddNewTaskToReadyList+0xc4>)
 80038d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d8:	2201      	movs	r2, #1
 80038da:	409a      	lsls	r2, r3
 80038dc:	4b19      	ldr	r3, [pc, #100]	@ (8003944 <prvAddNewTaskToReadyList+0xc8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	4a18      	ldr	r2, [pc, #96]	@ (8003944 <prvAddNewTaskToReadyList+0xc8>)
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4a15      	ldr	r2, [pc, #84]	@ (8003948 <prvAddNewTaskToReadyList+0xcc>)
 80038f4:	441a      	add	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f7ff fcc5 	bl	800328c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003902:	f000 fd53 	bl	80043ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003906:	4b0d      	ldr	r3, [pc, #52]	@ (800393c <prvAddNewTaskToReadyList+0xc0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00e      	beq.n	800392c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800390e:	4b0a      	ldr	r3, [pc, #40]	@ (8003938 <prvAddNewTaskToReadyList+0xbc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003918:	429a      	cmp	r2, r3
 800391a:	d207      	bcs.n	800392c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800391c:	4b0b      	ldr	r3, [pc, #44]	@ (800394c <prvAddNewTaskToReadyList+0xd0>)
 800391e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	200005b4 	.word	0x200005b4
 8003938:	20000360 	.word	0x20000360
 800393c:	200005c0 	.word	0x200005c0
 8003940:	200005d0 	.word	0x200005d0
 8003944:	200005bc 	.word	0x200005bc
 8003948:	20000364 	.word	0x20000364
 800394c:	e000ed04 	.word	0xe000ed04

08003950 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	@ 0x28
 8003954:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003956:	2300      	movs	r3, #0
 8003958:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800395e:	463a      	mov	r2, r7
 8003960:	1d39      	adds	r1, r7, #4
 8003962:	f107 0308 	add.w	r3, r7, #8
 8003966:	4618      	mov	r0, r3
 8003968:	f7fc ffa0 	bl	80008ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800396c:	6839      	ldr	r1, [r7, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	9202      	str	r2, [sp, #8]
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	2300      	movs	r3, #0
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	2300      	movs	r3, #0
 800397c:	460a      	mov	r2, r1
 800397e:	491f      	ldr	r1, [pc, #124]	@ (80039fc <vTaskStartScheduler+0xac>)
 8003980:	481f      	ldr	r0, [pc, #124]	@ (8003a00 <vTaskStartScheduler+0xb0>)
 8003982:	f7ff fe9c 	bl	80036be <xTaskCreateStatic>
 8003986:	4603      	mov	r3, r0
 8003988:	4a1e      	ldr	r2, [pc, #120]	@ (8003a04 <vTaskStartScheduler+0xb4>)
 800398a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800398c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a04 <vTaskStartScheduler+0xb4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003994:	2301      	movs	r3, #1
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	e001      	b.n	800399e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d116      	bne.n	80039d2 <vTaskStartScheduler+0x82>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	613b      	str	r3, [r7, #16]
}
 80039b6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039b8:	4b13      	ldr	r3, [pc, #76]	@ (8003a08 <vTaskStartScheduler+0xb8>)
 80039ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039c0:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <vTaskStartScheduler+0xbc>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80039c6:	4b12      	ldr	r3, [pc, #72]	@ (8003a10 <vTaskStartScheduler+0xc0>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039cc:	f000 fc4c 	bl	8004268 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039d0:	e00f      	b.n	80039f2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039d8:	d10b      	bne.n	80039f2 <vTaskStartScheduler+0xa2>
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	60fb      	str	r3, [r7, #12]
}
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
 80039f0:	e7fd      	b.n	80039ee <vTaskStartScheduler+0x9e>
}
 80039f2:	bf00      	nop
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	08004998 	.word	0x08004998
 8003a00:	08003e69 	.word	0x08003e69
 8003a04:	200005d8 	.word	0x200005d8
 8003a08:	200005d4 	.word	0x200005d4
 8003a0c:	200005c0 	.word	0x200005c0
 8003a10:	200005b8 	.word	0x200005b8

08003a14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003a18:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <vTaskSuspendAll+0x18>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	4a03      	ldr	r2, [pc, #12]	@ (8003a2c <vTaskSuspendAll+0x18>)
 8003a20:	6013      	str	r3, [r2, #0]
}
 8003a22:	bf00      	nop
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	200005dc 	.word	0x200005dc

08003a30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a3e:	4b42      	ldr	r3, [pc, #264]	@ (8003b48 <xTaskResumeAll+0x118>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10b      	bne.n	8003a5e <xTaskResumeAll+0x2e>
	__asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	603b      	str	r3, [r7, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	e7fd      	b.n	8003a5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a5e:	f000 fc75 	bl	800434c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a62:	4b39      	ldr	r3, [pc, #228]	@ (8003b48 <xTaskResumeAll+0x118>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	4a37      	ldr	r2, [pc, #220]	@ (8003b48 <xTaskResumeAll+0x118>)
 8003a6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a6c:	4b36      	ldr	r3, [pc, #216]	@ (8003b48 <xTaskResumeAll+0x118>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d161      	bne.n	8003b38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a74:	4b35      	ldr	r3, [pc, #212]	@ (8003b4c <xTaskResumeAll+0x11c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d05d      	beq.n	8003b38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a7c:	e02e      	b.n	8003adc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003a7e:	4b34      	ldr	r3, [pc, #208]	@ (8003b50 <xTaskResumeAll+0x120>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	3318      	adds	r3, #24
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fc21 	bl	80032d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3304      	adds	r3, #4
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff fc1c 	bl	80032d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	409a      	lsls	r2, r3
 8003aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8003b54 <xTaskResumeAll+0x124>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8003b54 <xTaskResumeAll+0x124>)
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4a27      	ldr	r2, [pc, #156]	@ (8003b58 <xTaskResumeAll+0x128>)
 8003aba:	441a      	add	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f7ff fbe2 	bl	800328c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003acc:	4b23      	ldr	r3, [pc, #140]	@ (8003b5c <xTaskResumeAll+0x12c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d302      	bcc.n	8003adc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ad6:	4b22      	ldr	r3, [pc, #136]	@ (8003b60 <xTaskResumeAll+0x130>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003adc:	4b1c      	ldr	r3, [pc, #112]	@ (8003b50 <xTaskResumeAll+0x120>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1cc      	bne.n	8003a7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003aea:	f000 fa73 	bl	8003fd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003aee:	4b1d      	ldr	r3, [pc, #116]	@ (8003b64 <xTaskResumeAll+0x134>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d010      	beq.n	8003b1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003afa:	f000 f837 	bl	8003b6c <xTaskIncrementTick>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b04:	4b16      	ldr	r3, [pc, #88]	@ (8003b60 <xTaskResumeAll+0x130>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f1      	bne.n	8003afa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003b16:	4b13      	ldr	r3, [pc, #76]	@ (8003b64 <xTaskResumeAll+0x134>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b1c:	4b10      	ldr	r3, [pc, #64]	@ (8003b60 <xTaskResumeAll+0x130>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d009      	beq.n	8003b38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b24:	2301      	movs	r3, #1
 8003b26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b28:	4b0f      	ldr	r3, [pc, #60]	@ (8003b68 <xTaskResumeAll+0x138>)
 8003b2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b38:	f000 fc38 	bl	80043ac <vPortExitCritical>

	return xAlreadyYielded;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200005dc 	.word	0x200005dc
 8003b4c:	200005b4 	.word	0x200005b4
 8003b50:	20000574 	.word	0x20000574
 8003b54:	200005bc 	.word	0x200005bc
 8003b58:	20000364 	.word	0x20000364
 8003b5c:	20000360 	.word	0x20000360
 8003b60:	200005c8 	.word	0x200005c8
 8003b64:	200005c4 	.word	0x200005c4
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b76:	4b51      	ldr	r3, [pc, #324]	@ (8003cbc <xTaskIncrementTick+0x150>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f040 808e 	bne.w	8003c9c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b80:	4b4f      	ldr	r3, [pc, #316]	@ (8003cc0 <xTaskIncrementTick+0x154>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3301      	adds	r3, #1
 8003b86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b88:	4a4d      	ldr	r2, [pc, #308]	@ (8003cc0 <xTaskIncrementTick+0x154>)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d121      	bne.n	8003bd8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b94:	4b4b      	ldr	r3, [pc, #300]	@ (8003cc4 <xTaskIncrementTick+0x158>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00b      	beq.n	8003bb6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	603b      	str	r3, [r7, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	e7fd      	b.n	8003bb2 <xTaskIncrementTick+0x46>
 8003bb6:	4b43      	ldr	r3, [pc, #268]	@ (8003cc4 <xTaskIncrementTick+0x158>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	4b42      	ldr	r3, [pc, #264]	@ (8003cc8 <xTaskIncrementTick+0x15c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a40      	ldr	r2, [pc, #256]	@ (8003cc4 <xTaskIncrementTick+0x158>)
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	4a40      	ldr	r2, [pc, #256]	@ (8003cc8 <xTaskIncrementTick+0x15c>)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b40      	ldr	r3, [pc, #256]	@ (8003ccc <xTaskIncrementTick+0x160>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	4a3e      	ldr	r2, [pc, #248]	@ (8003ccc <xTaskIncrementTick+0x160>)
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	f000 f9fe 	bl	8003fd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bd8:	4b3d      	ldr	r3, [pc, #244]	@ (8003cd0 <xTaskIncrementTick+0x164>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d34d      	bcc.n	8003c7e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003be2:	4b38      	ldr	r3, [pc, #224]	@ (8003cc4 <xTaskIncrementTick+0x158>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <xTaskIncrementTick+0x84>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <xTaskIncrementTick+0x86>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d004      	beq.n	8003c00 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf6:	4b36      	ldr	r3, [pc, #216]	@ (8003cd0 <xTaskIncrementTick+0x164>)
 8003bf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003bfc:	601a      	str	r2, [r3, #0]
					break;
 8003bfe:	e03e      	b.n	8003c7e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c00:	4b30      	ldr	r3, [pc, #192]	@ (8003cc4 <xTaskIncrementTick+0x158>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d203      	bcs.n	8003c20 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c18:	4a2d      	ldr	r2, [pc, #180]	@ (8003cd0 <xTaskIncrementTick+0x164>)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6013      	str	r3, [r2, #0]
						break;
 8003c1e:	e02e      	b.n	8003c7e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff fb54 	bl	80032d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d004      	beq.n	8003c3c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	3318      	adds	r3, #24
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fb4b 	bl	80032d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	2201      	movs	r2, #1
 8003c42:	409a      	lsls	r2, r3
 8003c44:	4b23      	ldr	r3, [pc, #140]	@ (8003cd4 <xTaskIncrementTick+0x168>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	4a22      	ldr	r2, [pc, #136]	@ (8003cd4 <xTaskIncrementTick+0x168>)
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd8 <xTaskIncrementTick+0x16c>)
 8003c5c:	441a      	add	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	3304      	adds	r3, #4
 8003c62:	4619      	mov	r1, r3
 8003c64:	4610      	mov	r0, r2
 8003c66:	f7ff fb11 	bl	800328c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cdc <xTaskIncrementTick+0x170>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d3b4      	bcc.n	8003be2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c7c:	e7b1      	b.n	8003be2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c7e:	4b17      	ldr	r3, [pc, #92]	@ (8003cdc <xTaskIncrementTick+0x170>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c84:	4914      	ldr	r1, [pc, #80]	@ (8003cd8 <xTaskIncrementTick+0x16c>)
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d907      	bls.n	8003ca6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003c96:	2301      	movs	r3, #1
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	e004      	b.n	8003ca6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c9c:	4b10      	ldr	r3, [pc, #64]	@ (8003ce0 <xTaskIncrementTick+0x174>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8003ce0 <xTaskIncrementTick+0x174>)
 8003ca4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce4 <xTaskIncrementTick+0x178>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003cb2:	697b      	ldr	r3, [r7, #20]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	200005dc 	.word	0x200005dc
 8003cc0:	200005b8 	.word	0x200005b8
 8003cc4:	2000056c 	.word	0x2000056c
 8003cc8:	20000570 	.word	0x20000570
 8003ccc:	200005cc 	.word	0x200005cc
 8003cd0:	200005d4 	.word	0x200005d4
 8003cd4:	200005bc 	.word	0x200005bc
 8003cd8:	20000364 	.word	0x20000364
 8003cdc:	20000360 	.word	0x20000360
 8003ce0:	200005c4 	.word	0x200005c4
 8003ce4:	200005c8 	.word	0x200005c8

08003ce8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cee:	4b27      	ldr	r3, [pc, #156]	@ (8003d8c <vTaskSwitchContext+0xa4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cf6:	4b26      	ldr	r3, [pc, #152]	@ (8003d90 <vTaskSwitchContext+0xa8>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cfc:	e040      	b.n	8003d80 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003cfe:	4b24      	ldr	r3, [pc, #144]	@ (8003d90 <vTaskSwitchContext+0xa8>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d04:	4b23      	ldr	r3, [pc, #140]	@ (8003d94 <vTaskSwitchContext+0xac>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	fab3 f383 	clz	r3, r3
 8003d10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d12:	7afb      	ldrb	r3, [r7, #11]
 8003d14:	f1c3 031f 	rsb	r3, r3, #31
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	491f      	ldr	r1, [pc, #124]	@ (8003d98 <vTaskSwitchContext+0xb0>)
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10b      	bne.n	8003d46 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	607b      	str	r3, [r7, #4]
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	e7fd      	b.n	8003d42 <vTaskSwitchContext+0x5a>
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4a11      	ldr	r2, [pc, #68]	@ (8003d98 <vTaskSwitchContext+0xb0>)
 8003d52:	4413      	add	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	605a      	str	r2, [r3, #4]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	3308      	adds	r3, #8
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d104      	bne.n	8003d76 <vTaskSwitchContext+0x8e>
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	605a      	str	r2, [r3, #4]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4a07      	ldr	r2, [pc, #28]	@ (8003d9c <vTaskSwitchContext+0xb4>)
 8003d7e:	6013      	str	r3, [r2, #0]
}
 8003d80:	bf00      	nop
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	200005dc 	.word	0x200005dc
 8003d90:	200005c8 	.word	0x200005c8
 8003d94:	200005bc 	.word	0x200005bc
 8003d98:	20000364 	.word	0x20000364
 8003d9c:	20000360 	.word	0x20000360

08003da0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10b      	bne.n	8003dce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	60fb      	str	r3, [r7, #12]
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	e7fd      	b.n	8003dca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	3318      	adds	r3, #24
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff fa7d 	bl	80032d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <xTaskRemoveFromEventList+0xb0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d11c      	bne.n	8003e1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff fa74 	bl	80032d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dee:	2201      	movs	r2, #1
 8003df0:	409a      	lsls	r2, r3
 8003df2:	4b18      	ldr	r3, [pc, #96]	@ (8003e54 <xTaskRemoveFromEventList+0xb4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	4a16      	ldr	r2, [pc, #88]	@ (8003e54 <xTaskRemoveFromEventList+0xb4>)
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4a13      	ldr	r2, [pc, #76]	@ (8003e58 <xTaskRemoveFromEventList+0xb8>)
 8003e0a:	441a      	add	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f7ff fa3a 	bl	800328c <vListInsertEnd>
 8003e18:	e005      	b.n	8003e26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	3318      	adds	r3, #24
 8003e1e:	4619      	mov	r1, r3
 8003e20:	480e      	ldr	r0, [pc, #56]	@ (8003e5c <xTaskRemoveFromEventList+0xbc>)
 8003e22:	f7ff fa33 	bl	800328c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <xTaskRemoveFromEventList+0xc0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d905      	bls.n	8003e40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e34:	2301      	movs	r3, #1
 8003e36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e38:	4b0a      	ldr	r3, [pc, #40]	@ (8003e64 <xTaskRemoveFromEventList+0xc4>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	e001      	b.n	8003e44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003e44:	697b      	ldr	r3, [r7, #20]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	200005dc 	.word	0x200005dc
 8003e54:	200005bc 	.word	0x200005bc
 8003e58:	20000364 	.word	0x20000364
 8003e5c:	20000574 	.word	0x20000574
 8003e60:	20000360 	.word	0x20000360
 8003e64:	200005c8 	.word	0x200005c8

08003e68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e70:	f000 f852 	bl	8003f18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e74:	4b06      	ldr	r3, [pc, #24]	@ (8003e90 <prvIdleTask+0x28>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d9f9      	bls.n	8003e70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e7c:	4b05      	ldr	r3, [pc, #20]	@ (8003e94 <prvIdleTask+0x2c>)
 8003e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e8c:	e7f0      	b.n	8003e70 <prvIdleTask+0x8>
 8003e8e:	bf00      	nop
 8003e90:	20000364 	.word	0x20000364
 8003e94:	e000ed04 	.word	0xe000ed04

08003e98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	e00c      	b.n	8003ebe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4a12      	ldr	r2, [pc, #72]	@ (8003ef8 <prvInitialiseTaskLists+0x60>)
 8003eb0:	4413      	add	r3, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff f9bf 	bl	8003236 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b17      	cmp	r3, #23
 8003ec2:	d9ef      	bls.n	8003ea4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ec4:	480d      	ldr	r0, [pc, #52]	@ (8003efc <prvInitialiseTaskLists+0x64>)
 8003ec6:	f7ff f9b6 	bl	8003236 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003eca:	480d      	ldr	r0, [pc, #52]	@ (8003f00 <prvInitialiseTaskLists+0x68>)
 8003ecc:	f7ff f9b3 	bl	8003236 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ed0:	480c      	ldr	r0, [pc, #48]	@ (8003f04 <prvInitialiseTaskLists+0x6c>)
 8003ed2:	f7ff f9b0 	bl	8003236 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ed6:	480c      	ldr	r0, [pc, #48]	@ (8003f08 <prvInitialiseTaskLists+0x70>)
 8003ed8:	f7ff f9ad 	bl	8003236 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003edc:	480b      	ldr	r0, [pc, #44]	@ (8003f0c <prvInitialiseTaskLists+0x74>)
 8003ede:	f7ff f9aa 	bl	8003236 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <prvInitialiseTaskLists+0x78>)
 8003ee4:	4a05      	ldr	r2, [pc, #20]	@ (8003efc <prvInitialiseTaskLists+0x64>)
 8003ee6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8003f14 <prvInitialiseTaskLists+0x7c>)
 8003eea:	4a05      	ldr	r2, [pc, #20]	@ (8003f00 <prvInitialiseTaskLists+0x68>)
 8003eec:	601a      	str	r2, [r3, #0]
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000364 	.word	0x20000364
 8003efc:	20000544 	.word	0x20000544
 8003f00:	20000558 	.word	0x20000558
 8003f04:	20000574 	.word	0x20000574
 8003f08:	20000588 	.word	0x20000588
 8003f0c:	200005a0 	.word	0x200005a0
 8003f10:	2000056c 	.word	0x2000056c
 8003f14:	20000570 	.word	0x20000570

08003f18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f1e:	e019      	b.n	8003f54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f20:	f000 fa14 	bl	800434c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003f24:	4b10      	ldr	r3, [pc, #64]	@ (8003f68 <prvCheckTasksWaitingTermination+0x50>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff f9ce 	bl	80032d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <prvCheckTasksWaitingTermination+0x54>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8003f6c <prvCheckTasksWaitingTermination+0x54>)
 8003f3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f40:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <prvCheckTasksWaitingTermination+0x58>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	4a0a      	ldr	r2, [pc, #40]	@ (8003f70 <prvCheckTasksWaitingTermination+0x58>)
 8003f48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f4a:	f000 fa2f 	bl	80043ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f810 	bl	8003f74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f54:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <prvCheckTasksWaitingTermination+0x58>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e1      	bne.n	8003f20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000588 	.word	0x20000588
 8003f6c:	200005b4 	.word	0x200005b4
 8003f70:	2000059c 	.word	0x2000059c

08003f74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d108      	bne.n	8003f98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fba8 	bl	80046e0 <vPortFree>
				vPortFree( pxTCB );
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fba5 	bl	80046e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f96:	e019      	b.n	8003fcc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d103      	bne.n	8003faa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fb9c 	bl	80046e0 <vPortFree>
	}
 8003fa8:	e010      	b.n	8003fcc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d00b      	beq.n	8003fcc <prvDeleteTCB+0x58>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	60fb      	str	r3, [r7, #12]
}
 8003fc6:	bf00      	nop
 8003fc8:	bf00      	nop
 8003fca:	e7fd      	b.n	8003fc8 <prvDeleteTCB+0x54>
	}
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fda:	4b0e      	ldr	r3, [pc, #56]	@ (8004014 <prvResetNextTaskUnblockTime+0x40>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <prvResetNextTaskUnblockTime+0x14>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <prvResetNextTaskUnblockTime+0x16>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fee:	4b0a      	ldr	r3, [pc, #40]	@ (8004018 <prvResetNextTaskUnblockTime+0x44>)
 8003ff0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ff4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ff6:	e008      	b.n	800400a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ff8:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <prvResetNextTaskUnblockTime+0x40>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4a04      	ldr	r2, [pc, #16]	@ (8004018 <prvResetNextTaskUnblockTime+0x44>)
 8004008:	6013      	str	r3, [r2, #0]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	2000056c 	.word	0x2000056c
 8004018:	200005d4 	.word	0x200005d4

0800401c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004022:	4b0b      	ldr	r3, [pc, #44]	@ (8004050 <xTaskGetSchedulerState+0x34>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d102      	bne.n	8004030 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800402a:	2301      	movs	r3, #1
 800402c:	607b      	str	r3, [r7, #4]
 800402e:	e008      	b.n	8004042 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004030:	4b08      	ldr	r3, [pc, #32]	@ (8004054 <xTaskGetSchedulerState+0x38>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d102      	bne.n	800403e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004038:	2302      	movs	r3, #2
 800403a:	607b      	str	r3, [r7, #4]
 800403c:	e001      	b.n	8004042 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004042:	687b      	ldr	r3, [r7, #4]
	}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	200005c0 	.word	0x200005c0
 8004054:	200005dc 	.word	0x200005dc

08004058 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d070      	beq.n	8004150 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800406e:	4b3b      	ldr	r3, [pc, #236]	@ (800415c <xTaskPriorityDisinherit+0x104>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	429a      	cmp	r2, r3
 8004076:	d00b      	beq.n	8004090 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	60fb      	str	r3, [r7, #12]
}
 800408a:	bf00      	nop
 800408c:	bf00      	nop
 800408e:	e7fd      	b.n	800408c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10b      	bne.n	80040b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	60bb      	str	r3, [r7, #8]
}
 80040aa:	bf00      	nop
 80040ac:	bf00      	nop
 80040ae:	e7fd      	b.n	80040ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b4:	1e5a      	subs	r2, r3, #1
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d044      	beq.n	8004150 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d140      	bne.n	8004150 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	3304      	adds	r3, #4
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff f8fd 	bl	80032d2 <uxListRemove>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d115      	bne.n	800410a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e2:	491f      	ldr	r1, [pc, #124]	@ (8004160 <xTaskPriorityDisinherit+0x108>)
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <xTaskPriorityDisinherit+0xb2>
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f8:	2201      	movs	r2, #1
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43da      	mvns	r2, r3
 8004100:	4b18      	ldr	r3, [pc, #96]	@ (8004164 <xTaskPriorityDisinherit+0x10c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4013      	ands	r3, r2
 8004106:	4a17      	ldr	r2, [pc, #92]	@ (8004164 <xTaskPriorityDisinherit+0x10c>)
 8004108:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004116:	f1c3 0218 	rsb	r2, r3, #24
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004122:	2201      	movs	r2, #1
 8004124:	409a      	lsls	r2, r3
 8004126:	4b0f      	ldr	r3, [pc, #60]	@ (8004164 <xTaskPriorityDisinherit+0x10c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4313      	orrs	r3, r2
 800412c:	4a0d      	ldr	r2, [pc, #52]	@ (8004164 <xTaskPriorityDisinherit+0x10c>)
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4a08      	ldr	r2, [pc, #32]	@ (8004160 <xTaskPriorityDisinherit+0x108>)
 800413e:	441a      	add	r2, r3
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	3304      	adds	r3, #4
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f7ff f8a0 	bl	800328c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800414c:	2301      	movs	r3, #1
 800414e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004150:	697b      	ldr	r3, [r7, #20]
	}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000360 	.word	0x20000360
 8004160:	20000364 	.word	0x20000364
 8004164:	200005bc 	.word	0x200005bc

08004168 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	3b04      	subs	r3, #4
 8004178:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004180:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3b04      	subs	r3, #4
 8004186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f023 0201 	bic.w	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3b04      	subs	r3, #4
 8004196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004198:	4a08      	ldr	r2, [pc, #32]	@ (80041bc <pxPortInitialiseStack+0x54>)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3b14      	subs	r3, #20
 80041a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3b20      	subs	r3, #32
 80041ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80041b0:	68fb      	ldr	r3, [r7, #12]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	080041c1 	.word	0x080041c1

080041c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041ca:	4b12      	ldr	r3, [pc, #72]	@ (8004214 <prvTaskExitError+0x54>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041d2:	d00b      	beq.n	80041ec <prvTaskExitError+0x2c>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	60fb      	str	r3, [r7, #12]
}
 80041e6:	bf00      	nop
 80041e8:	bf00      	nop
 80041ea:	e7fd      	b.n	80041e8 <prvTaskExitError+0x28>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	60bb      	str	r3, [r7, #8]
}
 80041fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004200:	bf00      	nop
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0fc      	beq.n	8004202 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr
 8004214:	2000000c 	.word	0x2000000c
	...

08004220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004220:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <pxCurrentTCBConst2>)
 8004222:	6819      	ldr	r1, [r3, #0]
 8004224:	6808      	ldr	r0, [r1, #0]
 8004226:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800422a:	f380 8809 	msr	PSP, r0
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f380 8811 	msr	BASEPRI, r0
 800423a:	f04e 0e0d 	orr.w	lr, lr, #13
 800423e:	4770      	bx	lr

08004240 <pxCurrentTCBConst2>:
 8004240:	20000360 	.word	0x20000360
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop

08004248 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004248:	4806      	ldr	r0, [pc, #24]	@ (8004264 <prvPortStartFirstTask+0x1c>)
 800424a:	6800      	ldr	r0, [r0, #0]
 800424c:	6800      	ldr	r0, [r0, #0]
 800424e:	f380 8808 	msr	MSP, r0
 8004252:	b662      	cpsie	i
 8004254:	b661      	cpsie	f
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	df00      	svc	0
 8004260:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004262:	bf00      	nop
 8004264:	e000ed08 	.word	0xe000ed08

08004268 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800426e:	4b32      	ldr	r3, [pc, #200]	@ (8004338 <xPortStartScheduler+0xd0>)
 8004270:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	22ff      	movs	r2, #255	@ 0xff
 800427e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4b2a      	ldr	r3, [pc, #168]	@ (800433c <xPortStartScheduler+0xd4>)
 8004294:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004296:	4b2a      	ldr	r3, [pc, #168]	@ (8004340 <xPortStartScheduler+0xd8>)
 8004298:	2207      	movs	r2, #7
 800429a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800429c:	e009      	b.n	80042b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800429e:	4b28      	ldr	r3, [pc, #160]	@ (8004340 <xPortStartScheduler+0xd8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	4a26      	ldr	r2, [pc, #152]	@ (8004340 <xPortStartScheduler+0xd8>)
 80042a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ba:	2b80      	cmp	r3, #128	@ 0x80
 80042bc:	d0ef      	beq.n	800429e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042be:	4b20      	ldr	r3, [pc, #128]	@ (8004340 <xPortStartScheduler+0xd8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f1c3 0307 	rsb	r3, r3, #7
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d00b      	beq.n	80042e2 <xPortStartScheduler+0x7a>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	60bb      	str	r3, [r7, #8]
}
 80042dc:	bf00      	nop
 80042de:	bf00      	nop
 80042e0:	e7fd      	b.n	80042de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042e2:	4b17      	ldr	r3, [pc, #92]	@ (8004340 <xPortStartScheduler+0xd8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	4a15      	ldr	r2, [pc, #84]	@ (8004340 <xPortStartScheduler+0xd8>)
 80042ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042ec:	4b14      	ldr	r3, [pc, #80]	@ (8004340 <xPortStartScheduler+0xd8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042f4:	4a12      	ldr	r2, [pc, #72]	@ (8004340 <xPortStartScheduler+0xd8>)
 80042f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004300:	4b10      	ldr	r3, [pc, #64]	@ (8004344 <xPortStartScheduler+0xdc>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a0f      	ldr	r2, [pc, #60]	@ (8004344 <xPortStartScheduler+0xdc>)
 8004306:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800430a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800430c:	4b0d      	ldr	r3, [pc, #52]	@ (8004344 <xPortStartScheduler+0xdc>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a0c      	ldr	r2, [pc, #48]	@ (8004344 <xPortStartScheduler+0xdc>)
 8004312:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004316:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004318:	f000 f8b8 	bl	800448c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800431c:	4b0a      	ldr	r3, [pc, #40]	@ (8004348 <xPortStartScheduler+0xe0>)
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004322:	f7ff ff91 	bl	8004248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004326:	f7ff fcdf 	bl	8003ce8 <vTaskSwitchContext>
	prvTaskExitError();
 800432a:	f7ff ff49 	bl	80041c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	e000e400 	.word	0xe000e400
 800433c:	200005e0 	.word	0x200005e0
 8004340:	200005e4 	.word	0x200005e4
 8004344:	e000ed20 	.word	0xe000ed20
 8004348:	2000000c 	.word	0x2000000c

0800434c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	607b      	str	r3, [r7, #4]
}
 8004364:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004366:	4b0f      	ldr	r3, [pc, #60]	@ (80043a4 <vPortEnterCritical+0x58>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3301      	adds	r3, #1
 800436c:	4a0d      	ldr	r2, [pc, #52]	@ (80043a4 <vPortEnterCritical+0x58>)
 800436e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004370:	4b0c      	ldr	r3, [pc, #48]	@ (80043a4 <vPortEnterCritical+0x58>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d110      	bne.n	800439a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004378:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <vPortEnterCritical+0x5c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <vPortEnterCritical+0x4e>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	603b      	str	r3, [r7, #0]
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	e7fd      	b.n	8004396 <vPortEnterCritical+0x4a>
	}
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr
 80043a4:	2000000c 	.word	0x2000000c
 80043a8:	e000ed04 	.word	0xe000ed04

080043ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043b2:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <vPortExitCritical+0x50>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10b      	bne.n	80043d2 <vPortExitCritical+0x26>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	607b      	str	r3, [r7, #4]
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	e7fd      	b.n	80043ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80043d2:	4b0a      	ldr	r3, [pc, #40]	@ (80043fc <vPortExitCritical+0x50>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	4a08      	ldr	r2, [pc, #32]	@ (80043fc <vPortExitCritical+0x50>)
 80043da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043dc:	4b07      	ldr	r3, [pc, #28]	@ (80043fc <vPortExitCritical+0x50>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <vPortExitCritical+0x44>
 80043e4:	2300      	movs	r3, #0
 80043e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	f383 8811 	msr	BASEPRI, r3
}
 80043ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	2000000c 	.word	0x2000000c

08004400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004400:	f3ef 8009 	mrs	r0, PSP
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	4b0d      	ldr	r3, [pc, #52]	@ (8004440 <pxCurrentTCBConst>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004410:	6010      	str	r0, [r2, #0]
 8004412:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004416:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800441a:	f380 8811 	msr	BASEPRI, r0
 800441e:	f7ff fc63 	bl	8003ce8 <vTaskSwitchContext>
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f380 8811 	msr	BASEPRI, r0
 800442a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800442e:	6819      	ldr	r1, [r3, #0]
 8004430:	6808      	ldr	r0, [r1, #0]
 8004432:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004436:	f380 8809 	msr	PSP, r0
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	4770      	bx	lr

08004440 <pxCurrentTCBConst>:
 8004440:	20000360 	.word	0x20000360
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop

08004448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	607b      	str	r3, [r7, #4]
}
 8004460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004462:	f7ff fb83 	bl	8003b6c <xTaskIncrementTick>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800446c:	4b06      	ldr	r3, [pc, #24]	@ (8004488 <xPortSysTickHandler+0x40>)
 800446e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	2300      	movs	r3, #0
 8004476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f383 8811 	msr	BASEPRI, r3
}
 800447e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004480:	bf00      	nop
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004490:	4b0a      	ldr	r3, [pc, #40]	@ (80044bc <vPortSetupTimerInterrupt+0x30>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004496:	4b0a      	ldr	r3, [pc, #40]	@ (80044c0 <vPortSetupTimerInterrupt+0x34>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800449c:	4b09      	ldr	r3, [pc, #36]	@ (80044c4 <vPortSetupTimerInterrupt+0x38>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a09      	ldr	r2, [pc, #36]	@ (80044c8 <vPortSetupTimerInterrupt+0x3c>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	099b      	lsrs	r3, r3, #6
 80044a8:	4a08      	ldr	r2, [pc, #32]	@ (80044cc <vPortSetupTimerInterrupt+0x40>)
 80044aa:	3b01      	subs	r3, #1
 80044ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ae:	4b03      	ldr	r3, [pc, #12]	@ (80044bc <vPortSetupTimerInterrupt+0x30>)
 80044b0:	2207      	movs	r2, #7
 80044b2:	601a      	str	r2, [r3, #0]
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr
 80044bc:	e000e010 	.word	0xe000e010
 80044c0:	e000e018 	.word	0xe000e018
 80044c4:	20000000 	.word	0x20000000
 80044c8:	10624dd3 	.word	0x10624dd3
 80044cc:	e000e014 	.word	0xe000e014

080044d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80044d6:	f3ef 8305 	mrs	r3, IPSR
 80044da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b0f      	cmp	r3, #15
 80044e0:	d915      	bls.n	800450e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044e2:	4a17      	ldr	r2, [pc, #92]	@ (8004540 <vPortValidateInterruptPriority+0x70>)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044ec:	4b15      	ldr	r3, [pc, #84]	@ (8004544 <vPortValidateInterruptPriority+0x74>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	7afa      	ldrb	r2, [r7, #11]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d20b      	bcs.n	800450e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	607b      	str	r3, [r7, #4]
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	e7fd      	b.n	800450a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800450e:	4b0e      	ldr	r3, [pc, #56]	@ (8004548 <vPortValidateInterruptPriority+0x78>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004516:	4b0d      	ldr	r3, [pc, #52]	@ (800454c <vPortValidateInterruptPriority+0x7c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d90b      	bls.n	8004536 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	603b      	str	r3, [r7, #0]
}
 8004530:	bf00      	nop
 8004532:	bf00      	nop
 8004534:	e7fd      	b.n	8004532 <vPortValidateInterruptPriority+0x62>
	}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr
 8004540:	e000e3f0 	.word	0xe000e3f0
 8004544:	200005e0 	.word	0x200005e0
 8004548:	e000ed0c 	.word	0xe000ed0c
 800454c:	200005e4 	.word	0x200005e4

08004550 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08a      	sub	sp, #40	@ 0x28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004558:	2300      	movs	r3, #0
 800455a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800455c:	f7ff fa5a 	bl	8003a14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004560:	4b5a      	ldr	r3, [pc, #360]	@ (80046cc <pvPortMalloc+0x17c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004568:	f000 f916 	bl	8004798 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800456c:	4b58      	ldr	r3, [pc, #352]	@ (80046d0 <pvPortMalloc+0x180>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4013      	ands	r3, r2
 8004574:	2b00      	cmp	r3, #0
 8004576:	f040 8090 	bne.w	800469a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01e      	beq.n	80045be <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004580:	2208      	movs	r2, #8
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	2b00      	cmp	r3, #0
 8004590:	d015      	beq.n	80045be <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f023 0307 	bic.w	r3, r3, #7
 8004598:	3308      	adds	r3, #8
 800459a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00b      	beq.n	80045be <pvPortMalloc+0x6e>
	__asm volatile
 80045a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	617b      	str	r3, [r7, #20]
}
 80045b8:	bf00      	nop
 80045ba:	bf00      	nop
 80045bc:	e7fd      	b.n	80045ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d06a      	beq.n	800469a <pvPortMalloc+0x14a>
 80045c4:	4b43      	ldr	r3, [pc, #268]	@ (80046d4 <pvPortMalloc+0x184>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d865      	bhi.n	800469a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045ce:	4b42      	ldr	r3, [pc, #264]	@ (80046d8 <pvPortMalloc+0x188>)
 80045d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045d2:	4b41      	ldr	r3, [pc, #260]	@ (80046d8 <pvPortMalloc+0x188>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045d8:	e004      	b.n	80045e4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d903      	bls.n	80045f6 <pvPortMalloc+0xa6>
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f1      	bne.n	80045da <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045f6:	4b35      	ldr	r3, [pc, #212]	@ (80046cc <pvPortMalloc+0x17c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d04c      	beq.n	800469a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2208      	movs	r2, #8
 8004606:	4413      	add	r3, r2
 8004608:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	1ad2      	subs	r2, r2, r3
 800461a:	2308      	movs	r3, #8
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	429a      	cmp	r2, r3
 8004620:	d920      	bls.n	8004664 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00b      	beq.n	800464c <pvPortMalloc+0xfc>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	613b      	str	r3, [r7, #16]
}
 8004646:	bf00      	nop
 8004648:	bf00      	nop
 800464a:	e7fd      	b.n	8004648 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	1ad2      	subs	r2, r2, r3
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800465e:	69b8      	ldr	r0, [r7, #24]
 8004660:	f000 f8fc 	bl	800485c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004664:	4b1b      	ldr	r3, [pc, #108]	@ (80046d4 <pvPortMalloc+0x184>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	4a19      	ldr	r2, [pc, #100]	@ (80046d4 <pvPortMalloc+0x184>)
 8004670:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004672:	4b18      	ldr	r3, [pc, #96]	@ (80046d4 <pvPortMalloc+0x184>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4b19      	ldr	r3, [pc, #100]	@ (80046dc <pvPortMalloc+0x18c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d203      	bcs.n	8004686 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800467e:	4b15      	ldr	r3, [pc, #84]	@ (80046d4 <pvPortMalloc+0x184>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a16      	ldr	r2, [pc, #88]	@ (80046dc <pvPortMalloc+0x18c>)
 8004684:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	4b11      	ldr	r3, [pc, #68]	@ (80046d0 <pvPortMalloc+0x180>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	431a      	orrs	r2, r3
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800469a:	f7ff f9c9 	bl	8003a30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00b      	beq.n	80046c0 <pvPortMalloc+0x170>
	__asm volatile
 80046a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	60fb      	str	r3, [r7, #12]
}
 80046ba:	bf00      	nop
 80046bc:	bf00      	nop
 80046be:	e7fd      	b.n	80046bc <pvPortMalloc+0x16c>
	return pvReturn;
 80046c0:	69fb      	ldr	r3, [r7, #28]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3728      	adds	r7, #40	@ 0x28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	200025f0 	.word	0x200025f0
 80046d0:	200025fc 	.word	0x200025fc
 80046d4:	200025f4 	.word	0x200025f4
 80046d8:	200025e8 	.word	0x200025e8
 80046dc:	200025f8 	.word	0x200025f8

080046e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d04a      	beq.n	8004788 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046f2:	2308      	movs	r3, #8
 80046f4:	425b      	negs	r3, r3
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4413      	add	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	4b22      	ldr	r3, [pc, #136]	@ (8004790 <vPortFree+0xb0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4013      	ands	r3, r2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10b      	bne.n	8004726 <vPortFree+0x46>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	60fb      	str	r3, [r7, #12]
}
 8004720:	bf00      	nop
 8004722:	bf00      	nop
 8004724:	e7fd      	b.n	8004722 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00b      	beq.n	8004746 <vPortFree+0x66>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	60bb      	str	r3, [r7, #8]
}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	e7fd      	b.n	8004742 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	4b11      	ldr	r3, [pc, #68]	@ (8004790 <vPortFree+0xb0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4013      	ands	r3, r2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d019      	beq.n	8004788 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d115      	bne.n	8004788 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <vPortFree+0xb0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	43db      	mvns	r3, r3
 8004766:	401a      	ands	r2, r3
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800476c:	f7ff f952 	bl	8003a14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	4b07      	ldr	r3, [pc, #28]	@ (8004794 <vPortFree+0xb4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4413      	add	r3, r2
 800477a:	4a06      	ldr	r2, [pc, #24]	@ (8004794 <vPortFree+0xb4>)
 800477c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800477e:	6938      	ldr	r0, [r7, #16]
 8004780:	f000 f86c 	bl	800485c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004784:	f7ff f954 	bl	8003a30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004788:	bf00      	nop
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	200025fc 	.word	0x200025fc
 8004794:	200025f4 	.word	0x200025f4

08004798 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800479e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80047a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047a4:	4b27      	ldr	r3, [pc, #156]	@ (8004844 <prvHeapInit+0xac>)
 80047a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00c      	beq.n	80047cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3307      	adds	r3, #7
 80047b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0307 	bic.w	r3, r3, #7
 80047be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004844 <prvHeapInit+0xac>)
 80047c8:	4413      	add	r3, r2
 80047ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004848 <prvHeapInit+0xb0>)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004848 <prvHeapInit+0xb0>)
 80047d8:	2200      	movs	r2, #0
 80047da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	4413      	add	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047e4:	2208      	movs	r2, #8
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0307 	bic.w	r3, r3, #7
 80047f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4a15      	ldr	r2, [pc, #84]	@ (800484c <prvHeapInit+0xb4>)
 80047f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047fa:	4b14      	ldr	r3, [pc, #80]	@ (800484c <prvHeapInit+0xb4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2200      	movs	r2, #0
 8004800:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004802:	4b12      	ldr	r3, [pc, #72]	@ (800484c <prvHeapInit+0xb4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	1ad2      	subs	r2, r2, r3
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004818:	4b0c      	ldr	r3, [pc, #48]	@ (800484c <prvHeapInit+0xb4>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	4a0a      	ldr	r2, [pc, #40]	@ (8004850 <prvHeapInit+0xb8>)
 8004826:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	4a09      	ldr	r2, [pc, #36]	@ (8004854 <prvHeapInit+0xbc>)
 800482e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004830:	4b09      	ldr	r3, [pc, #36]	@ (8004858 <prvHeapInit+0xc0>)
 8004832:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004836:	601a      	str	r2, [r3, #0]
}
 8004838:	bf00      	nop
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	200005e8 	.word	0x200005e8
 8004848:	200025e8 	.word	0x200025e8
 800484c:	200025f0 	.word	0x200025f0
 8004850:	200025f8 	.word	0x200025f8
 8004854:	200025f4 	.word	0x200025f4
 8004858:	200025fc 	.word	0x200025fc

0800485c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004864:	4b27      	ldr	r3, [pc, #156]	@ (8004904 <prvInsertBlockIntoFreeList+0xa8>)
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e002      	b.n	8004870 <prvInsertBlockIntoFreeList+0x14>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	429a      	cmp	r2, r3
 8004878:	d8f7      	bhi.n	800486a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	4413      	add	r3, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	429a      	cmp	r2, r3
 800488a:	d108      	bne.n	800489e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	441a      	add	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	441a      	add	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d118      	bne.n	80048e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4b14      	ldr	r3, [pc, #80]	@ (8004908 <prvInsertBlockIntoFreeList+0xac>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d00d      	beq.n	80048da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	441a      	add	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	e008      	b.n	80048ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048da:	4b0b      	ldr	r3, [pc, #44]	@ (8004908 <prvInsertBlockIntoFreeList+0xac>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	e003      	b.n	80048ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d002      	beq.n	80048fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048fa:	bf00      	nop
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr
 8004904:	200025e8 	.word	0x200025e8
 8004908:	200025f0 	.word	0x200025f0

0800490c <memset>:
 800490c:	4603      	mov	r3, r0
 800490e:	4402      	add	r2, r0
 8004910:	4293      	cmp	r3, r2
 8004912:	d100      	bne.n	8004916 <memset+0xa>
 8004914:	4770      	bx	lr
 8004916:	f803 1b01 	strb.w	r1, [r3], #1
 800491a:	e7f9      	b.n	8004910 <memset+0x4>

0800491c <__libc_init_array>:
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	2600      	movs	r6, #0
 8004920:	4d0c      	ldr	r5, [pc, #48]	@ (8004954 <__libc_init_array+0x38>)
 8004922:	4c0d      	ldr	r4, [pc, #52]	@ (8004958 <__libc_init_array+0x3c>)
 8004924:	1b64      	subs	r4, r4, r5
 8004926:	10a4      	asrs	r4, r4, #2
 8004928:	42a6      	cmp	r6, r4
 800492a:	d109      	bne.n	8004940 <__libc_init_array+0x24>
 800492c:	f000 f828 	bl	8004980 <_init>
 8004930:	2600      	movs	r6, #0
 8004932:	4d0a      	ldr	r5, [pc, #40]	@ (800495c <__libc_init_array+0x40>)
 8004934:	4c0a      	ldr	r4, [pc, #40]	@ (8004960 <__libc_init_array+0x44>)
 8004936:	1b64      	subs	r4, r4, r5
 8004938:	10a4      	asrs	r4, r4, #2
 800493a:	42a6      	cmp	r6, r4
 800493c:	d105      	bne.n	800494a <__libc_init_array+0x2e>
 800493e:	bd70      	pop	{r4, r5, r6, pc}
 8004940:	f855 3b04 	ldr.w	r3, [r5], #4
 8004944:	4798      	blx	r3
 8004946:	3601      	adds	r6, #1
 8004948:	e7ee      	b.n	8004928 <__libc_init_array+0xc>
 800494a:	f855 3b04 	ldr.w	r3, [r5], #4
 800494e:	4798      	blx	r3
 8004950:	3601      	adds	r6, #1
 8004952:	e7f2      	b.n	800493a <__libc_init_array+0x1e>
 8004954:	080049cc 	.word	0x080049cc
 8004958:	080049cc 	.word	0x080049cc
 800495c:	080049cc 	.word	0x080049cc
 8004960:	080049d0 	.word	0x080049d0

08004964 <memcpy>:
 8004964:	440a      	add	r2, r1
 8004966:	4291      	cmp	r1, r2
 8004968:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800496c:	d100      	bne.n	8004970 <memcpy+0xc>
 800496e:	4770      	bx	lr
 8004970:	b510      	push	{r4, lr}
 8004972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004976:	4291      	cmp	r1, r2
 8004978:	f803 4f01 	strb.w	r4, [r3, #1]!
 800497c:	d1f9      	bne.n	8004972 <memcpy+0xe>
 800497e:	bd10      	pop	{r4, pc}

08004980 <_init>:
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	bf00      	nop
 8004984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004986:	bc08      	pop	{r3}
 8004988:	469e      	mov	lr, r3
 800498a:	4770      	bx	lr

0800498c <_fini>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	bf00      	nop
 8004990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004992:	bc08      	pop	{r3}
 8004994:	469e      	mov	lr, r3
 8004996:	4770      	bx	lr
